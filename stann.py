# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_stann', [dirname(__file__)])
        except ImportError:
            import _stann
            return _stann
        if fp is not None:
            try:
                _mod = imp.load_module('_stann', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _stann = swig_import_helper()
    del swig_import_helper
else:
    import _stann
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _stann.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _stann.SwigPyIterator_value(self)
    def incr(self, n=1): return _stann.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _stann.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _stann.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _stann.SwigPyIterator_equal(self, *args)
    def copy(self): return _stann.SwigPyIterator_copy(self)
    def next(self): return _stann.SwigPyIterator_next(self)
    def __next__(self): return _stann.SwigPyIterator___next__(self)
    def previous(self): return _stann.SwigPyIterator_previous(self)
    def advance(self, *args): return _stann.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _stann.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _stann.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _stann.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _stann.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _stann.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _stann.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _stann.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.StringVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.StringVector___nonzero__(self)
    def __bool__(self): return _stann.StringVector___bool__(self)
    def __len__(self): return _stann.StringVector___len__(self)
    def pop(self): return _stann.StringVector_pop(self)
    def __getslice__(self, *args): return _stann.StringVector___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.StringVector___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.StringVector___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.StringVector___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.StringVector___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.StringVector___setitem__(self, *args)
    def append(self, *args): return _stann.StringVector_append(self, *args)
    def empty(self): return _stann.StringVector_empty(self)
    def size(self): return _stann.StringVector_size(self)
    def clear(self): return _stann.StringVector_clear(self)
    def swap(self, *args): return _stann.StringVector_swap(self, *args)
    def get_allocator(self): return _stann.StringVector_get_allocator(self)
    def begin(self): return _stann.StringVector_begin(self)
    def end(self): return _stann.StringVector_end(self)
    def rbegin(self): return _stann.StringVector_rbegin(self)
    def rend(self): return _stann.StringVector_rend(self)
    def pop_back(self): return _stann.StringVector_pop_back(self)
    def erase(self, *args): return _stann.StringVector_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.StringVector_push_back(self, *args)
    def front(self): return _stann.StringVector_front(self)
    def back(self): return _stann.StringVector_back(self)
    def assign(self, *args): return _stann.StringVector_assign(self, *args)
    def resize(self, *args): return _stann.StringVector_resize(self, *args)
    def insert(self, *args): return _stann.StringVector_insert(self, *args)
    def reserve(self, *args): return _stann.StringVector_reserve(self, *args)
    def capacity(self): return _stann.StringVector_capacity(self)
    __swig_destroy__ = _stann.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = _stann.StringVector_swigregister
StringVector_swigregister(StringVector)

class UShortVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UShortVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UShortVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.UShortVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.UShortVector___nonzero__(self)
    def __bool__(self): return _stann.UShortVector___bool__(self)
    def __len__(self): return _stann.UShortVector___len__(self)
    def pop(self): return _stann.UShortVector_pop(self)
    def __getslice__(self, *args): return _stann.UShortVector___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.UShortVector___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.UShortVector___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.UShortVector___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.UShortVector___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.UShortVector___setitem__(self, *args)
    def append(self, *args): return _stann.UShortVector_append(self, *args)
    def empty(self): return _stann.UShortVector_empty(self)
    def size(self): return _stann.UShortVector_size(self)
    def clear(self): return _stann.UShortVector_clear(self)
    def swap(self, *args): return _stann.UShortVector_swap(self, *args)
    def get_allocator(self): return _stann.UShortVector_get_allocator(self)
    def begin(self): return _stann.UShortVector_begin(self)
    def end(self): return _stann.UShortVector_end(self)
    def rbegin(self): return _stann.UShortVector_rbegin(self)
    def rend(self): return _stann.UShortVector_rend(self)
    def pop_back(self): return _stann.UShortVector_pop_back(self)
    def erase(self, *args): return _stann.UShortVector_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_UShortVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.UShortVector_push_back(self, *args)
    def front(self): return _stann.UShortVector_front(self)
    def back(self): return _stann.UShortVector_back(self)
    def assign(self, *args): return _stann.UShortVector_assign(self, *args)
    def resize(self, *args): return _stann.UShortVector_resize(self, *args)
    def insert(self, *args): return _stann.UShortVector_insert(self, *args)
    def reserve(self, *args): return _stann.UShortVector_reserve(self, *args)
    def capacity(self): return _stann.UShortVector_capacity(self)
    __swig_destroy__ = _stann.delete_UShortVector
    __del__ = lambda self : None;
UShortVector_swigregister = _stann.UShortVector_swigregister
UShortVector_swigregister(UShortVector)

class ShortVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShortVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShortVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.ShortVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.ShortVector___nonzero__(self)
    def __bool__(self): return _stann.ShortVector___bool__(self)
    def __len__(self): return _stann.ShortVector___len__(self)
    def pop(self): return _stann.ShortVector_pop(self)
    def __getslice__(self, *args): return _stann.ShortVector___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.ShortVector___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.ShortVector___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.ShortVector___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.ShortVector___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.ShortVector___setitem__(self, *args)
    def append(self, *args): return _stann.ShortVector_append(self, *args)
    def empty(self): return _stann.ShortVector_empty(self)
    def size(self): return _stann.ShortVector_size(self)
    def clear(self): return _stann.ShortVector_clear(self)
    def swap(self, *args): return _stann.ShortVector_swap(self, *args)
    def get_allocator(self): return _stann.ShortVector_get_allocator(self)
    def begin(self): return _stann.ShortVector_begin(self)
    def end(self): return _stann.ShortVector_end(self)
    def rbegin(self): return _stann.ShortVector_rbegin(self)
    def rend(self): return _stann.ShortVector_rend(self)
    def pop_back(self): return _stann.ShortVector_pop_back(self)
    def erase(self, *args): return _stann.ShortVector_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_ShortVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.ShortVector_push_back(self, *args)
    def front(self): return _stann.ShortVector_front(self)
    def back(self): return _stann.ShortVector_back(self)
    def assign(self, *args): return _stann.ShortVector_assign(self, *args)
    def resize(self, *args): return _stann.ShortVector_resize(self, *args)
    def insert(self, *args): return _stann.ShortVector_insert(self, *args)
    def reserve(self, *args): return _stann.ShortVector_reserve(self, *args)
    def capacity(self): return _stann.ShortVector_capacity(self)
    __swig_destroy__ = _stann.delete_ShortVector
    __del__ = lambda self : None;
ShortVector_swigregister = _stann.ShortVector_swigregister
ShortVector_swigregister(ShortVector)

class UIntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UIntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UIntVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.UIntVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.UIntVector___nonzero__(self)
    def __bool__(self): return _stann.UIntVector___bool__(self)
    def __len__(self): return _stann.UIntVector___len__(self)
    def pop(self): return _stann.UIntVector_pop(self)
    def __getslice__(self, *args): return _stann.UIntVector___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.UIntVector___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.UIntVector___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.UIntVector___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.UIntVector___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.UIntVector___setitem__(self, *args)
    def append(self, *args): return _stann.UIntVector_append(self, *args)
    def empty(self): return _stann.UIntVector_empty(self)
    def size(self): return _stann.UIntVector_size(self)
    def clear(self): return _stann.UIntVector_clear(self)
    def swap(self, *args): return _stann.UIntVector_swap(self, *args)
    def get_allocator(self): return _stann.UIntVector_get_allocator(self)
    def begin(self): return _stann.UIntVector_begin(self)
    def end(self): return _stann.UIntVector_end(self)
    def rbegin(self): return _stann.UIntVector_rbegin(self)
    def rend(self): return _stann.UIntVector_rend(self)
    def pop_back(self): return _stann.UIntVector_pop_back(self)
    def erase(self, *args): return _stann.UIntVector_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_UIntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.UIntVector_push_back(self, *args)
    def front(self): return _stann.UIntVector_front(self)
    def back(self): return _stann.UIntVector_back(self)
    def assign(self, *args): return _stann.UIntVector_assign(self, *args)
    def resize(self, *args): return _stann.UIntVector_resize(self, *args)
    def insert(self, *args): return _stann.UIntVector_insert(self, *args)
    def reserve(self, *args): return _stann.UIntVector_reserve(self, *args)
    def capacity(self): return _stann.UIntVector_capacity(self)
    __swig_destroy__ = _stann.delete_UIntVector
    __del__ = lambda self : None;
UIntVector_swigregister = _stann.UIntVector_swigregister
UIntVector_swigregister(UIntVector)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.IntVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.IntVector___nonzero__(self)
    def __bool__(self): return _stann.IntVector___bool__(self)
    def __len__(self): return _stann.IntVector___len__(self)
    def pop(self): return _stann.IntVector_pop(self)
    def __getslice__(self, *args): return _stann.IntVector___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.IntVector___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.IntVector___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.IntVector___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.IntVector___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.IntVector___setitem__(self, *args)
    def append(self, *args): return _stann.IntVector_append(self, *args)
    def empty(self): return _stann.IntVector_empty(self)
    def size(self): return _stann.IntVector_size(self)
    def clear(self): return _stann.IntVector_clear(self)
    def swap(self, *args): return _stann.IntVector_swap(self, *args)
    def get_allocator(self): return _stann.IntVector_get_allocator(self)
    def begin(self): return _stann.IntVector_begin(self)
    def end(self): return _stann.IntVector_end(self)
    def rbegin(self): return _stann.IntVector_rbegin(self)
    def rend(self): return _stann.IntVector_rend(self)
    def pop_back(self): return _stann.IntVector_pop_back(self)
    def erase(self, *args): return _stann.IntVector_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.IntVector_push_back(self, *args)
    def front(self): return _stann.IntVector_front(self)
    def back(self): return _stann.IntVector_back(self)
    def assign(self, *args): return _stann.IntVector_assign(self, *args)
    def resize(self, *args): return _stann.IntVector_resize(self, *args)
    def insert(self, *args): return _stann.IntVector_insert(self, *args)
    def reserve(self, *args): return _stann.IntVector_reserve(self, *args)
    def capacity(self): return _stann.IntVector_capacity(self)
    __swig_destroy__ = _stann.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _stann.IntVector_swigregister
IntVector_swigregister(IntVector)

class ULongVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ULongVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ULongVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.ULongVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.ULongVector___nonzero__(self)
    def __bool__(self): return _stann.ULongVector___bool__(self)
    def __len__(self): return _stann.ULongVector___len__(self)
    def pop(self): return _stann.ULongVector_pop(self)
    def __getslice__(self, *args): return _stann.ULongVector___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.ULongVector___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.ULongVector___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.ULongVector___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.ULongVector___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.ULongVector___setitem__(self, *args)
    def append(self, *args): return _stann.ULongVector_append(self, *args)
    def empty(self): return _stann.ULongVector_empty(self)
    def size(self): return _stann.ULongVector_size(self)
    def clear(self): return _stann.ULongVector_clear(self)
    def swap(self, *args): return _stann.ULongVector_swap(self, *args)
    def get_allocator(self): return _stann.ULongVector_get_allocator(self)
    def begin(self): return _stann.ULongVector_begin(self)
    def end(self): return _stann.ULongVector_end(self)
    def rbegin(self): return _stann.ULongVector_rbegin(self)
    def rend(self): return _stann.ULongVector_rend(self)
    def pop_back(self): return _stann.ULongVector_pop_back(self)
    def erase(self, *args): return _stann.ULongVector_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_ULongVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.ULongVector_push_back(self, *args)
    def front(self): return _stann.ULongVector_front(self)
    def back(self): return _stann.ULongVector_back(self)
    def assign(self, *args): return _stann.ULongVector_assign(self, *args)
    def resize(self, *args): return _stann.ULongVector_resize(self, *args)
    def insert(self, *args): return _stann.ULongVector_insert(self, *args)
    def reserve(self, *args): return _stann.ULongVector_reserve(self, *args)
    def capacity(self): return _stann.ULongVector_capacity(self)
    __swig_destroy__ = _stann.delete_ULongVector
    __del__ = lambda self : None;
ULongVector_swigregister = _stann.ULongVector_swigregister
ULongVector_swigregister(ULongVector)

class LongVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LongVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LongVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.LongVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.LongVector___nonzero__(self)
    def __bool__(self): return _stann.LongVector___bool__(self)
    def __len__(self): return _stann.LongVector___len__(self)
    def pop(self): return _stann.LongVector_pop(self)
    def __getslice__(self, *args): return _stann.LongVector___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.LongVector___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.LongVector___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.LongVector___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.LongVector___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.LongVector___setitem__(self, *args)
    def append(self, *args): return _stann.LongVector_append(self, *args)
    def empty(self): return _stann.LongVector_empty(self)
    def size(self): return _stann.LongVector_size(self)
    def clear(self): return _stann.LongVector_clear(self)
    def swap(self, *args): return _stann.LongVector_swap(self, *args)
    def get_allocator(self): return _stann.LongVector_get_allocator(self)
    def begin(self): return _stann.LongVector_begin(self)
    def end(self): return _stann.LongVector_end(self)
    def rbegin(self): return _stann.LongVector_rbegin(self)
    def rend(self): return _stann.LongVector_rend(self)
    def pop_back(self): return _stann.LongVector_pop_back(self)
    def erase(self, *args): return _stann.LongVector_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_LongVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.LongVector_push_back(self, *args)
    def front(self): return _stann.LongVector_front(self)
    def back(self): return _stann.LongVector_back(self)
    def assign(self, *args): return _stann.LongVector_assign(self, *args)
    def resize(self, *args): return _stann.LongVector_resize(self, *args)
    def insert(self, *args): return _stann.LongVector_insert(self, *args)
    def reserve(self, *args): return _stann.LongVector_reserve(self, *args)
    def capacity(self): return _stann.LongVector_capacity(self)
    __swig_destroy__ = _stann.delete_LongVector
    __del__ = lambda self : None;
LongVector_swigregister = _stann.LongVector_swigregister
LongVector_swigregister(LongVector)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.FloatVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.FloatVector___nonzero__(self)
    def __bool__(self): return _stann.FloatVector___bool__(self)
    def __len__(self): return _stann.FloatVector___len__(self)
    def pop(self): return _stann.FloatVector_pop(self)
    def __getslice__(self, *args): return _stann.FloatVector___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.FloatVector___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.FloatVector___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.FloatVector___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.FloatVector___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.FloatVector___setitem__(self, *args)
    def append(self, *args): return _stann.FloatVector_append(self, *args)
    def empty(self): return _stann.FloatVector_empty(self)
    def size(self): return _stann.FloatVector_size(self)
    def clear(self): return _stann.FloatVector_clear(self)
    def swap(self, *args): return _stann.FloatVector_swap(self, *args)
    def get_allocator(self): return _stann.FloatVector_get_allocator(self)
    def begin(self): return _stann.FloatVector_begin(self)
    def end(self): return _stann.FloatVector_end(self)
    def rbegin(self): return _stann.FloatVector_rbegin(self)
    def rend(self): return _stann.FloatVector_rend(self)
    def pop_back(self): return _stann.FloatVector_pop_back(self)
    def erase(self, *args): return _stann.FloatVector_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_FloatVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.FloatVector_push_back(self, *args)
    def front(self): return _stann.FloatVector_front(self)
    def back(self): return _stann.FloatVector_back(self)
    def assign(self, *args): return _stann.FloatVector_assign(self, *args)
    def resize(self, *args): return _stann.FloatVector_resize(self, *args)
    def insert(self, *args): return _stann.FloatVector_insert(self, *args)
    def reserve(self, *args): return _stann.FloatVector_reserve(self, *args)
    def capacity(self): return _stann.FloatVector_capacity(self)
    __swig_destroy__ = _stann.delete_FloatVector
    __del__ = lambda self : None;
FloatVector_swigregister = _stann.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.DoubleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.DoubleVector___nonzero__(self)
    def __bool__(self): return _stann.DoubleVector___bool__(self)
    def __len__(self): return _stann.DoubleVector___len__(self)
    def pop(self): return _stann.DoubleVector_pop(self)
    def __getslice__(self, *args): return _stann.DoubleVector___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.DoubleVector___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.DoubleVector___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.DoubleVector___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.DoubleVector___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.DoubleVector___setitem__(self, *args)
    def append(self, *args): return _stann.DoubleVector_append(self, *args)
    def empty(self): return _stann.DoubleVector_empty(self)
    def size(self): return _stann.DoubleVector_size(self)
    def clear(self): return _stann.DoubleVector_clear(self)
    def swap(self, *args): return _stann.DoubleVector_swap(self, *args)
    def get_allocator(self): return _stann.DoubleVector_get_allocator(self)
    def begin(self): return _stann.DoubleVector_begin(self)
    def end(self): return _stann.DoubleVector_end(self)
    def rbegin(self): return _stann.DoubleVector_rbegin(self)
    def rend(self): return _stann.DoubleVector_rend(self)
    def pop_back(self): return _stann.DoubleVector_pop_back(self)
    def erase(self, *args): return _stann.DoubleVector_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.DoubleVector_push_back(self, *args)
    def front(self): return _stann.DoubleVector_front(self)
    def back(self): return _stann.DoubleVector_back(self)
    def assign(self, *args): return _stann.DoubleVector_assign(self, *args)
    def resize(self, *args): return _stann.DoubleVector_resize(self, *args)
    def insert(self, *args): return _stann.DoubleVector_insert(self, *args)
    def reserve(self, *args): return _stann.DoubleVector_reserve(self, *args)
    def capacity(self): return _stann.DoubleVector_capacity(self)
    __swig_destroy__ = _stann.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _stann.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StannInt8Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StannInt8Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StannInt8Array, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stann.new_StannInt8Array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_StannInt8Array
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _stann.StannInt8Array___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.StannInt8Array___setitem__(self, *args)
    def cast(self): return _stann.StannInt8Array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _stann.StannInt8Array_frompointer
    if _newclass:frompointer = staticmethod(_stann.StannInt8Array_frompointer)
StannInt8Array_swigregister = _stann.StannInt8Array_swigregister
StannInt8Array_swigregister(StannInt8Array)

def StannInt8Array_frompointer(*args):
  return _stann.StannInt8Array_frompointer(*args)
StannInt8Array_frompointer = _stann.StannInt8Array_frompointer

class StannUInt8Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StannUInt8Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StannUInt8Array, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stann.new_StannUInt8Array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_StannUInt8Array
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _stann.StannUInt8Array___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.StannUInt8Array___setitem__(self, *args)
    def cast(self): return _stann.StannUInt8Array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _stann.StannUInt8Array_frompointer
    if _newclass:frompointer = staticmethod(_stann.StannUInt8Array_frompointer)
StannUInt8Array_swigregister = _stann.StannUInt8Array_swigregister
StannUInt8Array_swigregister(StannUInt8Array)

def StannUInt8Array_frompointer(*args):
  return _stann.StannUInt8Array_frompointer(*args)
StannUInt8Array_frompointer = _stann.StannUInt8Array_frompointer

class StannInt16Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StannInt16Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StannInt16Array, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stann.new_StannInt16Array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_StannInt16Array
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _stann.StannInt16Array___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.StannInt16Array___setitem__(self, *args)
    def cast(self): return _stann.StannInt16Array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _stann.StannInt16Array_frompointer
    if _newclass:frompointer = staticmethod(_stann.StannInt16Array_frompointer)
StannInt16Array_swigregister = _stann.StannInt16Array_swigregister
StannInt16Array_swigregister(StannInt16Array)

def StannInt16Array_frompointer(*args):
  return _stann.StannInt16Array_frompointer(*args)
StannInt16Array_frompointer = _stann.StannInt16Array_frompointer

class StannUInt16Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StannUInt16Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StannUInt16Array, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stann.new_StannUInt16Array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_StannUInt16Array
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _stann.StannUInt16Array___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.StannUInt16Array___setitem__(self, *args)
    def cast(self): return _stann.StannUInt16Array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _stann.StannUInt16Array_frompointer
    if _newclass:frompointer = staticmethod(_stann.StannUInt16Array_frompointer)
StannUInt16Array_swigregister = _stann.StannUInt16Array_swigregister
StannUInt16Array_swigregister(StannUInt16Array)

def StannUInt16Array_frompointer(*args):
  return _stann.StannUInt16Array_frompointer(*args)
StannUInt16Array_frompointer = _stann.StannUInt16Array_frompointer

class StannInt32Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StannInt32Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StannInt32Array, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stann.new_StannInt32Array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_StannInt32Array
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _stann.StannInt32Array___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.StannInt32Array___setitem__(self, *args)
    def cast(self): return _stann.StannInt32Array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _stann.StannInt32Array_frompointer
    if _newclass:frompointer = staticmethod(_stann.StannInt32Array_frompointer)
StannInt32Array_swigregister = _stann.StannInt32Array_swigregister
StannInt32Array_swigregister(StannInt32Array)

def StannInt32Array_frompointer(*args):
  return _stann.StannInt32Array_frompointer(*args)
StannInt32Array_frompointer = _stann.StannInt32Array_frompointer

class StannUInt32Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StannUInt32Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StannUInt32Array, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stann.new_StannUInt32Array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_StannUInt32Array
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _stann.StannUInt32Array___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.StannUInt32Array___setitem__(self, *args)
    def cast(self): return _stann.StannUInt32Array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _stann.StannUInt32Array_frompointer
    if _newclass:frompointer = staticmethod(_stann.StannUInt32Array_frompointer)
StannUInt32Array_swigregister = _stann.StannUInt32Array_swigregister
StannUInt32Array_swigregister(StannUInt32Array)

def StannUInt32Array_frompointer(*args):
  return _stann.StannUInt32Array_frompointer(*args)
StannUInt32Array_frompointer = _stann.StannUInt32Array_frompointer

class StannInt64Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StannInt64Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StannInt64Array, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stann.new_StannInt64Array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_StannInt64Array
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _stann.StannInt64Array___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.StannInt64Array___setitem__(self, *args)
    def cast(self): return _stann.StannInt64Array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _stann.StannInt64Array_frompointer
    if _newclass:frompointer = staticmethod(_stann.StannInt64Array_frompointer)
StannInt64Array_swigregister = _stann.StannInt64Array_swigregister
StannInt64Array_swigregister(StannInt64Array)

def StannInt64Array_frompointer(*args):
  return _stann.StannInt64Array_frompointer(*args)
StannInt64Array_frompointer = _stann.StannInt64Array_frompointer

class StannUInt64Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StannUInt64Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StannUInt64Array, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stann.new_StannUInt64Array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_StannUInt64Array
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _stann.StannUInt64Array___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.StannUInt64Array___setitem__(self, *args)
    def cast(self): return _stann.StannUInt64Array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _stann.StannUInt64Array_frompointer
    if _newclass:frompointer = staticmethod(_stann.StannUInt64Array_frompointer)
StannUInt64Array_swigregister = _stann.StannUInt64Array_swigregister
StannUInt64Array_swigregister(StannUInt64Array)

def StannUInt64Array_frompointer(*args):
  return _stann.StannUInt64Array_frompointer(*args)
StannUInt64Array_frompointer = _stann.StannUInt64Array_frompointer

class StannFloatArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StannFloatArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StannFloatArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stann.new_StannFloatArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_StannFloatArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _stann.StannFloatArray___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.StannFloatArray___setitem__(self, *args)
    def cast(self): return _stann.StannFloatArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _stann.StannFloatArray_frompointer
    if _newclass:frompointer = staticmethod(_stann.StannFloatArray_frompointer)
StannFloatArray_swigregister = _stann.StannFloatArray_swigregister
StannFloatArray_swigregister(StannFloatArray)

def StannFloatArray_frompointer(*args):
  return _stann.StannFloatArray_frompointer(*args)
StannFloatArray_frompointer = _stann.StannFloatArray_frompointer

class StannDoubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StannDoubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StannDoubleArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stann.new_StannDoubleArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_StannDoubleArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _stann.StannDoubleArray___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.StannDoubleArray___setitem__(self, *args)
    def cast(self): return _stann.StannDoubleArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _stann.StannDoubleArray_frompointer
    if _newclass:frompointer = staticmethod(_stann.StannDoubleArray_frompointer)
StannDoubleArray_swigregister = _stann.StannDoubleArray_swigregister
StannDoubleArray_swigregister(StannDoubleArray)

def StannDoubleArray_frompointer(*args):
  return _stann.StannDoubleArray_frompointer(*args)
StannDoubleArray_frompointer = _stann.StannDoubleArray_frompointer


def testZLT_1d_UShort(*args):
  return _stann.testZLT_1d_UShort(*args)
testZLT_1d_UShort = _stann.testZLT_1d_UShort

def testZLT_1d_Short(*args):
  return _stann.testZLT_1d_Short(*args)
testZLT_1d_Short = _stann.testZLT_1d_Short

def testZLT_1d_UInt(*args):
  return _stann.testZLT_1d_UInt(*args)
testZLT_1d_UInt = _stann.testZLT_1d_UInt

def testZLT_1d_Int(*args):
  return _stann.testZLT_1d_Int(*args)
testZLT_1d_Int = _stann.testZLT_1d_Int

def testZLT_1d_ULong(*args):
  return _stann.testZLT_1d_ULong(*args)
testZLT_1d_ULong = _stann.testZLT_1d_ULong

def testZLT_1d_Long(*args):
  return _stann.testZLT_1d_Long(*args)
testZLT_1d_Long = _stann.testZLT_1d_Long

def testZLT_1d_Float(*args):
  return _stann.testZLT_1d_Float(*args)
testZLT_1d_Float = _stann.testZLT_1d_Float

def testZLT_1d_Double(*args):
  return _stann.testZLT_1d_Double(*args)
testZLT_1d_Double = _stann.testZLT_1d_Double

def testZLT_2d_UShort(*args):
  return _stann.testZLT_2d_UShort(*args)
testZLT_2d_UShort = _stann.testZLT_2d_UShort

def testZLT_2d_Short(*args):
  return _stann.testZLT_2d_Short(*args)
testZLT_2d_Short = _stann.testZLT_2d_Short

def testZLT_2d_UInt(*args):
  return _stann.testZLT_2d_UInt(*args)
testZLT_2d_UInt = _stann.testZLT_2d_UInt

def testZLT_2d_Int(*args):
  return _stann.testZLT_2d_Int(*args)
testZLT_2d_Int = _stann.testZLT_2d_Int

def testZLT_2d_ULong(*args):
  return _stann.testZLT_2d_ULong(*args)
testZLT_2d_ULong = _stann.testZLT_2d_ULong

def testZLT_2d_Long(*args):
  return _stann.testZLT_2d_Long(*args)
testZLT_2d_Long = _stann.testZLT_2d_Long

def testZLT_2d_Float(*args):
  return _stann.testZLT_2d_Float(*args)
testZLT_2d_Float = _stann.testZLT_2d_Float

def testZLT_2d_Double(*args):
  return _stann.testZLT_2d_Double(*args)
testZLT_2d_Double = _stann.testZLT_2d_Double

def testZLT_3d_UShort(*args):
  return _stann.testZLT_3d_UShort(*args)
testZLT_3d_UShort = _stann.testZLT_3d_UShort

def testZLT_3d_Short(*args):
  return _stann.testZLT_3d_Short(*args)
testZLT_3d_Short = _stann.testZLT_3d_Short

def testZLT_3d_UInt(*args):
  return _stann.testZLT_3d_UInt(*args)
testZLT_3d_UInt = _stann.testZLT_3d_UInt

def testZLT_3d_Int(*args):
  return _stann.testZLT_3d_Int(*args)
testZLT_3d_Int = _stann.testZLT_3d_Int

def testZLT_3d_ULong(*args):
  return _stann.testZLT_3d_ULong(*args)
testZLT_3d_ULong = _stann.testZLT_3d_ULong

def testZLT_3d_Long(*args):
  return _stann.testZLT_3d_Long(*args)
testZLT_3d_Long = _stann.testZLT_3d_Long

def testZLT_3d_Float(*args):
  return _stann.testZLT_3d_Float(*args)
testZLT_3d_Float = _stann.testZLT_3d_Float

def testZLT_3d_Double(*args):
  return _stann.testZLT_3d_Double(*args)
testZLT_3d_Double = _stann.testZLT_3d_Double

def testZLT_4d_UShort(*args):
  return _stann.testZLT_4d_UShort(*args)
testZLT_4d_UShort = _stann.testZLT_4d_UShort

def testZLT_4d_Short(*args):
  return _stann.testZLT_4d_Short(*args)
testZLT_4d_Short = _stann.testZLT_4d_Short

def testZLT_4d_UInt(*args):
  return _stann.testZLT_4d_UInt(*args)
testZLT_4d_UInt = _stann.testZLT_4d_UInt

def testZLT_4d_Int(*args):
  return _stann.testZLT_4d_Int(*args)
testZLT_4d_Int = _stann.testZLT_4d_Int

def testZLT_4d_ULong(*args):
  return _stann.testZLT_4d_ULong(*args)
testZLT_4d_ULong = _stann.testZLT_4d_ULong

def testZLT_4d_Long(*args):
  return _stann.testZLT_4d_Long(*args)
testZLT_4d_Long = _stann.testZLT_4d_Long

def testZLT_4d_Float(*args):
  return _stann.testZLT_4d_Float(*args)
testZLT_4d_Float = _stann.testZLT_4d_Float

def testZLT_4d_Double(*args):
  return _stann.testZLT_4d_Double(*args)
testZLT_4d_Double = _stann.testZLT_4d_Double

def testZLT_5d_UShort(*args):
  return _stann.testZLT_5d_UShort(*args)
testZLT_5d_UShort = _stann.testZLT_5d_UShort

def testZLT_5d_Short(*args):
  return _stann.testZLT_5d_Short(*args)
testZLT_5d_Short = _stann.testZLT_5d_Short

def testZLT_5d_UInt(*args):
  return _stann.testZLT_5d_UInt(*args)
testZLT_5d_UInt = _stann.testZLT_5d_UInt

def testZLT_5d_Int(*args):
  return _stann.testZLT_5d_Int(*args)
testZLT_5d_Int = _stann.testZLT_5d_Int

def testZLT_5d_ULong(*args):
  return _stann.testZLT_5d_ULong(*args)
testZLT_5d_ULong = _stann.testZLT_5d_ULong

def testZLT_5d_Long(*args):
  return _stann.testZLT_5d_Long(*args)
testZLT_5d_Long = _stann.testZLT_5d_Long

def testZLT_5d_Float(*args):
  return _stann.testZLT_5d_Float(*args)
testZLT_5d_Float = _stann.testZLT_5d_Float

def testZLT_5d_Double(*args):
  return _stann.testZLT_5d_Double(*args)
testZLT_5d_Double = _stann.testZLT_5d_Double

def testSORT_1d_UShort(*args):
  return _stann.testSORT_1d_UShort(*args)
testSORT_1d_UShort = _stann.testSORT_1d_UShort

def testSORT_1d_Short(*args):
  return _stann.testSORT_1d_Short(*args)
testSORT_1d_Short = _stann.testSORT_1d_Short

def testSORT_1d_UInt(*args):
  return _stann.testSORT_1d_UInt(*args)
testSORT_1d_UInt = _stann.testSORT_1d_UInt

def testSORT_1d_Int(*args):
  return _stann.testSORT_1d_Int(*args)
testSORT_1d_Int = _stann.testSORT_1d_Int

def testSORT_1d_ULong(*args):
  return _stann.testSORT_1d_ULong(*args)
testSORT_1d_ULong = _stann.testSORT_1d_ULong

def testSORT_1d_Long(*args):
  return _stann.testSORT_1d_Long(*args)
testSORT_1d_Long = _stann.testSORT_1d_Long

def testSORT_1d_Float(*args):
  return _stann.testSORT_1d_Float(*args)
testSORT_1d_Float = _stann.testSORT_1d_Float

def testSORT_1d_Double(*args):
  return _stann.testSORT_1d_Double(*args)
testSORT_1d_Double = _stann.testSORT_1d_Double

def testSORT_2d_UShort(*args):
  return _stann.testSORT_2d_UShort(*args)
testSORT_2d_UShort = _stann.testSORT_2d_UShort

def testSORT_2d_Short(*args):
  return _stann.testSORT_2d_Short(*args)
testSORT_2d_Short = _stann.testSORT_2d_Short

def testSORT_2d_UInt(*args):
  return _stann.testSORT_2d_UInt(*args)
testSORT_2d_UInt = _stann.testSORT_2d_UInt

def testSORT_2d_Int(*args):
  return _stann.testSORT_2d_Int(*args)
testSORT_2d_Int = _stann.testSORT_2d_Int

def testSORT_2d_ULong(*args):
  return _stann.testSORT_2d_ULong(*args)
testSORT_2d_ULong = _stann.testSORT_2d_ULong

def testSORT_2d_Long(*args):
  return _stann.testSORT_2d_Long(*args)
testSORT_2d_Long = _stann.testSORT_2d_Long

def testSORT_2d_Float(*args):
  return _stann.testSORT_2d_Float(*args)
testSORT_2d_Float = _stann.testSORT_2d_Float

def testSORT_2d_Double(*args):
  return _stann.testSORT_2d_Double(*args)
testSORT_2d_Double = _stann.testSORT_2d_Double

def testSORT_3d_UShort(*args):
  return _stann.testSORT_3d_UShort(*args)
testSORT_3d_UShort = _stann.testSORT_3d_UShort

def testSORT_3d_Short(*args):
  return _stann.testSORT_3d_Short(*args)
testSORT_3d_Short = _stann.testSORT_3d_Short

def testSORT_3d_UInt(*args):
  return _stann.testSORT_3d_UInt(*args)
testSORT_3d_UInt = _stann.testSORT_3d_UInt

def testSORT_3d_Int(*args):
  return _stann.testSORT_3d_Int(*args)
testSORT_3d_Int = _stann.testSORT_3d_Int

def testSORT_3d_ULong(*args):
  return _stann.testSORT_3d_ULong(*args)
testSORT_3d_ULong = _stann.testSORT_3d_ULong

def testSORT_3d_Long(*args):
  return _stann.testSORT_3d_Long(*args)
testSORT_3d_Long = _stann.testSORT_3d_Long

def testSORT_3d_Float(*args):
  return _stann.testSORT_3d_Float(*args)
testSORT_3d_Float = _stann.testSORT_3d_Float

def testSORT_3d_Double(*args):
  return _stann.testSORT_3d_Double(*args)
testSORT_3d_Double = _stann.testSORT_3d_Double

def testSORT_4d_UShort(*args):
  return _stann.testSORT_4d_UShort(*args)
testSORT_4d_UShort = _stann.testSORT_4d_UShort

def testSORT_4d_Short(*args):
  return _stann.testSORT_4d_Short(*args)
testSORT_4d_Short = _stann.testSORT_4d_Short

def testSORT_4d_UInt(*args):
  return _stann.testSORT_4d_UInt(*args)
testSORT_4d_UInt = _stann.testSORT_4d_UInt

def testSORT_4d_Int(*args):
  return _stann.testSORT_4d_Int(*args)
testSORT_4d_Int = _stann.testSORT_4d_Int

def testSORT_4d_ULong(*args):
  return _stann.testSORT_4d_ULong(*args)
testSORT_4d_ULong = _stann.testSORT_4d_ULong

def testSORT_4d_Long(*args):
  return _stann.testSORT_4d_Long(*args)
testSORT_4d_Long = _stann.testSORT_4d_Long

def testSORT_4d_Float(*args):
  return _stann.testSORT_4d_Float(*args)
testSORT_4d_Float = _stann.testSORT_4d_Float

def testSORT_4d_Double(*args):
  return _stann.testSORT_4d_Double(*args)
testSORT_4d_Double = _stann.testSORT_4d_Double

def testSORT_5d_UShort(*args):
  return _stann.testSORT_5d_UShort(*args)
testSORT_5d_UShort = _stann.testSORT_5d_UShort

def testSORT_5d_Short(*args):
  return _stann.testSORT_5d_Short(*args)
testSORT_5d_Short = _stann.testSORT_5d_Short

def testSORT_5d_UInt(*args):
  return _stann.testSORT_5d_UInt(*args)
testSORT_5d_UInt = _stann.testSORT_5d_UInt

def testSORT_5d_Int(*args):
  return _stann.testSORT_5d_Int(*args)
testSORT_5d_Int = _stann.testSORT_5d_Int

def testSORT_5d_ULong(*args):
  return _stann.testSORT_5d_ULong(*args)
testSORT_5d_ULong = _stann.testSORT_5d_ULong

def testSORT_5d_Long(*args):
  return _stann.testSORT_5d_Long(*args)
testSORT_5d_Long = _stann.testSORT_5d_Long

def testSORT_5d_Float(*args):
  return _stann.testSORT_5d_Float(*args)
testSORT_5d_Float = _stann.testSORT_5d_Float

def testSORT_5d_Double(*args):
  return _stann.testSORT_5d_Double(*args)
testSORT_5d_Double = _stann.testSORT_5d_Double

def testNN_1d_UShort(*args):
  return _stann.testNN_1d_UShort(*args)
testNN_1d_UShort = _stann.testNN_1d_UShort

def testNN_1d_Short(*args):
  return _stann.testNN_1d_Short(*args)
testNN_1d_Short = _stann.testNN_1d_Short

def testNN_1d_UInt(*args):
  return _stann.testNN_1d_UInt(*args)
testNN_1d_UInt = _stann.testNN_1d_UInt

def testNN_1d_Int(*args):
  return _stann.testNN_1d_Int(*args)
testNN_1d_Int = _stann.testNN_1d_Int

def testNN_1d_ULong(*args):
  return _stann.testNN_1d_ULong(*args)
testNN_1d_ULong = _stann.testNN_1d_ULong

def testNN_1d_Long(*args):
  return _stann.testNN_1d_Long(*args)
testNN_1d_Long = _stann.testNN_1d_Long

def testNN_1d_Float(*args):
  return _stann.testNN_1d_Float(*args)
testNN_1d_Float = _stann.testNN_1d_Float

def testNN_1d_Double(*args):
  return _stann.testNN_1d_Double(*args)
testNN_1d_Double = _stann.testNN_1d_Double

def testNN_2d_UShort(*args):
  return _stann.testNN_2d_UShort(*args)
testNN_2d_UShort = _stann.testNN_2d_UShort

def testNN_2d_Short(*args):
  return _stann.testNN_2d_Short(*args)
testNN_2d_Short = _stann.testNN_2d_Short

def testNN_2d_UInt(*args):
  return _stann.testNN_2d_UInt(*args)
testNN_2d_UInt = _stann.testNN_2d_UInt

def testNN_2d_Int(*args):
  return _stann.testNN_2d_Int(*args)
testNN_2d_Int = _stann.testNN_2d_Int

def testNN_2d_ULong(*args):
  return _stann.testNN_2d_ULong(*args)
testNN_2d_ULong = _stann.testNN_2d_ULong

def testNN_2d_Long(*args):
  return _stann.testNN_2d_Long(*args)
testNN_2d_Long = _stann.testNN_2d_Long

def testNN_2d_Float(*args):
  return _stann.testNN_2d_Float(*args)
testNN_2d_Float = _stann.testNN_2d_Float

def testNN_2d_Double(*args):
  return _stann.testNN_2d_Double(*args)
testNN_2d_Double = _stann.testNN_2d_Double

def testNN_3d_UShort(*args):
  return _stann.testNN_3d_UShort(*args)
testNN_3d_UShort = _stann.testNN_3d_UShort

def testNN_3d_Short(*args):
  return _stann.testNN_3d_Short(*args)
testNN_3d_Short = _stann.testNN_3d_Short

def testNN_3d_UInt(*args):
  return _stann.testNN_3d_UInt(*args)
testNN_3d_UInt = _stann.testNN_3d_UInt

def testNN_3d_Int(*args):
  return _stann.testNN_3d_Int(*args)
testNN_3d_Int = _stann.testNN_3d_Int

def testNN_3d_ULong(*args):
  return _stann.testNN_3d_ULong(*args)
testNN_3d_ULong = _stann.testNN_3d_ULong

def testNN_3d_Long(*args):
  return _stann.testNN_3d_Long(*args)
testNN_3d_Long = _stann.testNN_3d_Long

def testNN_3d_Float(*args):
  return _stann.testNN_3d_Float(*args)
testNN_3d_Float = _stann.testNN_3d_Float

def testNN_3d_Double(*args):
  return _stann.testNN_3d_Double(*args)
testNN_3d_Double = _stann.testNN_3d_Double

def testNN_4d_UShort(*args):
  return _stann.testNN_4d_UShort(*args)
testNN_4d_UShort = _stann.testNN_4d_UShort

def testNN_4d_Short(*args):
  return _stann.testNN_4d_Short(*args)
testNN_4d_Short = _stann.testNN_4d_Short

def testNN_4d_UInt(*args):
  return _stann.testNN_4d_UInt(*args)
testNN_4d_UInt = _stann.testNN_4d_UInt

def testNN_4d_Int(*args):
  return _stann.testNN_4d_Int(*args)
testNN_4d_Int = _stann.testNN_4d_Int

def testNN_4d_ULong(*args):
  return _stann.testNN_4d_ULong(*args)
testNN_4d_ULong = _stann.testNN_4d_ULong

def testNN_4d_Long(*args):
  return _stann.testNN_4d_Long(*args)
testNN_4d_Long = _stann.testNN_4d_Long

def testNN_4d_Float(*args):
  return _stann.testNN_4d_Float(*args)
testNN_4d_Float = _stann.testNN_4d_Float

def testNN_4d_Double(*args):
  return _stann.testNN_4d_Double(*args)
testNN_4d_Double = _stann.testNN_4d_Double

def testNN_5d_UShort(*args):
  return _stann.testNN_5d_UShort(*args)
testNN_5d_UShort = _stann.testNN_5d_UShort

def testNN_5d_Short(*args):
  return _stann.testNN_5d_Short(*args)
testNN_5d_Short = _stann.testNN_5d_Short

def testNN_5d_UInt(*args):
  return _stann.testNN_5d_UInt(*args)
testNN_5d_UInt = _stann.testNN_5d_UInt

def testNN_5d_Int(*args):
  return _stann.testNN_5d_Int(*args)
testNN_5d_Int = _stann.testNN_5d_Int

def testNN_5d_ULong(*args):
  return _stann.testNN_5d_ULong(*args)
testNN_5d_ULong = _stann.testNN_5d_ULong

def testNN_5d_Long(*args):
  return _stann.testNN_5d_Long(*args)
testNN_5d_Long = _stann.testNN_5d_Long

def testNN_5d_Float(*args):
  return _stann.testNN_5d_Float(*args)
testNN_5d_Float = _stann.testNN_5d_Float

def testNN_5d_Double(*args):
  return _stann.testNN_5d_Double(*args)
testNN_5d_Double = _stann.testNN_5d_Double

def testKNNG_1d_UShort(*args):
  return _stann.testKNNG_1d_UShort(*args)
testKNNG_1d_UShort = _stann.testKNNG_1d_UShort

def testKNNG_1d_Short(*args):
  return _stann.testKNNG_1d_Short(*args)
testKNNG_1d_Short = _stann.testKNNG_1d_Short

def testKNNG_1d_UInt(*args):
  return _stann.testKNNG_1d_UInt(*args)
testKNNG_1d_UInt = _stann.testKNNG_1d_UInt

def testKNNG_1d_Int(*args):
  return _stann.testKNNG_1d_Int(*args)
testKNNG_1d_Int = _stann.testKNNG_1d_Int

def testKNNG_1d_ULong(*args):
  return _stann.testKNNG_1d_ULong(*args)
testKNNG_1d_ULong = _stann.testKNNG_1d_ULong

def testKNNG_1d_Long(*args):
  return _stann.testKNNG_1d_Long(*args)
testKNNG_1d_Long = _stann.testKNNG_1d_Long

def testKNNG_1d_Float(*args):
  return _stann.testKNNG_1d_Float(*args)
testKNNG_1d_Float = _stann.testKNNG_1d_Float

def testKNNG_1d_Double(*args):
  return _stann.testKNNG_1d_Double(*args)
testKNNG_1d_Double = _stann.testKNNG_1d_Double

def testKNNG_2d_UShort(*args):
  return _stann.testKNNG_2d_UShort(*args)
testKNNG_2d_UShort = _stann.testKNNG_2d_UShort

def testKNNG_2d_Short(*args):
  return _stann.testKNNG_2d_Short(*args)
testKNNG_2d_Short = _stann.testKNNG_2d_Short

def testKNNG_2d_UInt(*args):
  return _stann.testKNNG_2d_UInt(*args)
testKNNG_2d_UInt = _stann.testKNNG_2d_UInt

def testKNNG_2d_Int(*args):
  return _stann.testKNNG_2d_Int(*args)
testKNNG_2d_Int = _stann.testKNNG_2d_Int

def testKNNG_2d_ULong(*args):
  return _stann.testKNNG_2d_ULong(*args)
testKNNG_2d_ULong = _stann.testKNNG_2d_ULong

def testKNNG_2d_Long(*args):
  return _stann.testKNNG_2d_Long(*args)
testKNNG_2d_Long = _stann.testKNNG_2d_Long

def testKNNG_2d_Float(*args):
  return _stann.testKNNG_2d_Float(*args)
testKNNG_2d_Float = _stann.testKNNG_2d_Float

def testKNNG_2d_Double(*args):
  return _stann.testKNNG_2d_Double(*args)
testKNNG_2d_Double = _stann.testKNNG_2d_Double

def testKNNG_3d_UShort(*args):
  return _stann.testKNNG_3d_UShort(*args)
testKNNG_3d_UShort = _stann.testKNNG_3d_UShort

def testKNNG_3d_Short(*args):
  return _stann.testKNNG_3d_Short(*args)
testKNNG_3d_Short = _stann.testKNNG_3d_Short

def testKNNG_3d_UInt(*args):
  return _stann.testKNNG_3d_UInt(*args)
testKNNG_3d_UInt = _stann.testKNNG_3d_UInt

def testKNNG_3d_Int(*args):
  return _stann.testKNNG_3d_Int(*args)
testKNNG_3d_Int = _stann.testKNNG_3d_Int

def testKNNG_3d_ULong(*args):
  return _stann.testKNNG_3d_ULong(*args)
testKNNG_3d_ULong = _stann.testKNNG_3d_ULong

def testKNNG_3d_Long(*args):
  return _stann.testKNNG_3d_Long(*args)
testKNNG_3d_Long = _stann.testKNNG_3d_Long

def testKNNG_3d_Float(*args):
  return _stann.testKNNG_3d_Float(*args)
testKNNG_3d_Float = _stann.testKNNG_3d_Float

def testKNNG_3d_Double(*args):
  return _stann.testKNNG_3d_Double(*args)
testKNNG_3d_Double = _stann.testKNNG_3d_Double

def testKNNG_4d_UShort(*args):
  return _stann.testKNNG_4d_UShort(*args)
testKNNG_4d_UShort = _stann.testKNNG_4d_UShort

def testKNNG_4d_Short(*args):
  return _stann.testKNNG_4d_Short(*args)
testKNNG_4d_Short = _stann.testKNNG_4d_Short

def testKNNG_4d_UInt(*args):
  return _stann.testKNNG_4d_UInt(*args)
testKNNG_4d_UInt = _stann.testKNNG_4d_UInt

def testKNNG_4d_Int(*args):
  return _stann.testKNNG_4d_Int(*args)
testKNNG_4d_Int = _stann.testKNNG_4d_Int

def testKNNG_4d_ULong(*args):
  return _stann.testKNNG_4d_ULong(*args)
testKNNG_4d_ULong = _stann.testKNNG_4d_ULong

def testKNNG_4d_Long(*args):
  return _stann.testKNNG_4d_Long(*args)
testKNNG_4d_Long = _stann.testKNNG_4d_Long

def testKNNG_4d_Float(*args):
  return _stann.testKNNG_4d_Float(*args)
testKNNG_4d_Float = _stann.testKNNG_4d_Float

def testKNNG_4d_Double(*args):
  return _stann.testKNNG_4d_Double(*args)
testKNNG_4d_Double = _stann.testKNNG_4d_Double

def testKNNG_5d_UShort(*args):
  return _stann.testKNNG_5d_UShort(*args)
testKNNG_5d_UShort = _stann.testKNNG_5d_UShort

def testKNNG_5d_Short(*args):
  return _stann.testKNNG_5d_Short(*args)
testKNNG_5d_Short = _stann.testKNNG_5d_Short

def testKNNG_5d_UInt(*args):
  return _stann.testKNNG_5d_UInt(*args)
testKNNG_5d_UInt = _stann.testKNNG_5d_UInt

def testKNNG_5d_Int(*args):
  return _stann.testKNNG_5d_Int(*args)
testKNNG_5d_Int = _stann.testKNNG_5d_Int

def testKNNG_5d_ULong(*args):
  return _stann.testKNNG_5d_ULong(*args)
testKNNG_5d_ULong = _stann.testKNNG_5d_ULong

def testKNNG_5d_Long(*args):
  return _stann.testKNNG_5d_Long(*args)
testKNNG_5d_Long = _stann.testKNNG_5d_Long

def testKNNG_5d_Float(*args):
  return _stann.testKNNG_5d_Float(*args)
testKNNG_5d_Float = _stann.testKNNG_5d_Float

def testKNNG_5d_Double(*args):
  return _stann.testKNNG_5d_Double(*args)
testKNNG_5d_Double = _stann.testKNNG_5d_Double

def testGMST_1d(*args):
  return _stann.testGMST_1d(*args)
testGMST_1d = _stann.testGMST_1d

def testGMST_2d(*args):
  return _stann.testGMST_2d(*args)
testGMST_2d = _stann.testGMST_2d

def testGMST_3d(*args):
  return _stann.testGMST_3d(*args)
testGMST_3d = _stann.testGMST_3d

def testGMST_4d(*args):
  return _stann.testGMST_4d(*args)
testGMST_4d = _stann.testGMST_4d

def testGMST_5d(*args):
  return _stann.testGMST_5d(*args)
testGMST_5d = _stann.testGMST_5d
class DPoint_1d_UShort(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_1d_UShort, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_1d_UShort, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_1d_UShort_point_begin(self)
    def point_end(self): return _stann.DPoint_1d_UShort_point_end(self)
    __DIM = _stann.DPoint_1d_UShort___DIM
    def move2origin(self): return _stann.DPoint_1d_UShort_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_1d_UShort(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_1d_UShort
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_1d_UShort_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_1d_UShort_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_1d_UShort_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_1d_UShort_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_1d_UShort_sqr_length(self)
    def normalize(self): return _stann.DPoint_1d_UShort_normalize(self)
DPoint_1d_UShort_swigregister = _stann.DPoint_1d_UShort_swigregister
DPoint_1d_UShort_swigregister(DPoint_1d_UShort)

class DPoint_1d_Short(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_1d_Short, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_1d_Short, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_1d_Short_point_begin(self)
    def point_end(self): return _stann.DPoint_1d_Short_point_end(self)
    __DIM = _stann.DPoint_1d_Short___DIM
    def move2origin(self): return _stann.DPoint_1d_Short_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_1d_Short(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_1d_Short
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_1d_Short_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_1d_Short_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_1d_Short_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_1d_Short_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_1d_Short_sqr_length(self)
    def normalize(self): return _stann.DPoint_1d_Short_normalize(self)
DPoint_1d_Short_swigregister = _stann.DPoint_1d_Short_swigregister
DPoint_1d_Short_swigregister(DPoint_1d_Short)

class DPoint_1d_UInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_1d_UInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_1d_UInt, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_1d_UInt_point_begin(self)
    def point_end(self): return _stann.DPoint_1d_UInt_point_end(self)
    __DIM = _stann.DPoint_1d_UInt___DIM
    def move2origin(self): return _stann.DPoint_1d_UInt_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_1d_UInt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_1d_UInt
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_1d_UInt_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_1d_UInt_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_1d_UInt_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_1d_UInt_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_1d_UInt_sqr_length(self)
    def normalize(self): return _stann.DPoint_1d_UInt_normalize(self)
DPoint_1d_UInt_swigregister = _stann.DPoint_1d_UInt_swigregister
DPoint_1d_UInt_swigregister(DPoint_1d_UInt)

class DPoint_1d_Int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_1d_Int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_1d_Int, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_1d_Int_point_begin(self)
    def point_end(self): return _stann.DPoint_1d_Int_point_end(self)
    __DIM = _stann.DPoint_1d_Int___DIM
    def move2origin(self): return _stann.DPoint_1d_Int_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_1d_Int(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_1d_Int
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_1d_Int_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_1d_Int_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_1d_Int_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_1d_Int_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_1d_Int_sqr_length(self)
    def normalize(self): return _stann.DPoint_1d_Int_normalize(self)
DPoint_1d_Int_swigregister = _stann.DPoint_1d_Int_swigregister
DPoint_1d_Int_swigregister(DPoint_1d_Int)

class DPoint_1d_ULong(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_1d_ULong, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_1d_ULong, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_1d_ULong_point_begin(self)
    def point_end(self): return _stann.DPoint_1d_ULong_point_end(self)
    __DIM = _stann.DPoint_1d_ULong___DIM
    def move2origin(self): return _stann.DPoint_1d_ULong_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_1d_ULong(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_1d_ULong
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_1d_ULong_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_1d_ULong_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_1d_ULong_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_1d_ULong_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_1d_ULong_sqr_length(self)
    def normalize(self): return _stann.DPoint_1d_ULong_normalize(self)
DPoint_1d_ULong_swigregister = _stann.DPoint_1d_ULong_swigregister
DPoint_1d_ULong_swigregister(DPoint_1d_ULong)

class DPoint_1d_Long(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_1d_Long, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_1d_Long, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_1d_Long_point_begin(self)
    def point_end(self): return _stann.DPoint_1d_Long_point_end(self)
    __DIM = _stann.DPoint_1d_Long___DIM
    def move2origin(self): return _stann.DPoint_1d_Long_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_1d_Long(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_1d_Long
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_1d_Long_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_1d_Long_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_1d_Long_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_1d_Long_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_1d_Long_sqr_length(self)
    def normalize(self): return _stann.DPoint_1d_Long_normalize(self)
DPoint_1d_Long_swigregister = _stann.DPoint_1d_Long_swigregister
DPoint_1d_Long_swigregister(DPoint_1d_Long)

class DPoint_1d_Float(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_1d_Float, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_1d_Float, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_1d_Float_point_begin(self)
    def point_end(self): return _stann.DPoint_1d_Float_point_end(self)
    __DIM = _stann.DPoint_1d_Float___DIM
    def move2origin(self): return _stann.DPoint_1d_Float_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_1d_Float(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_1d_Float
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_1d_Float_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_1d_Float_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_1d_Float_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_1d_Float_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_1d_Float_sqr_length(self)
    def normalize(self): return _stann.DPoint_1d_Float_normalize(self)
DPoint_1d_Float_swigregister = _stann.DPoint_1d_Float_swigregister
DPoint_1d_Float_swigregister(DPoint_1d_Float)

class DPoint_1d_Double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_1d_Double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_1d_Double, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_1d_Double_point_begin(self)
    def point_end(self): return _stann.DPoint_1d_Double_point_end(self)
    __DIM = _stann.DPoint_1d_Double___DIM
    def move2origin(self): return _stann.DPoint_1d_Double_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_1d_Double(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_1d_Double
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_1d_Double_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_1d_Double_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_1d_Double_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_1d_Double_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_1d_Double_sqr_length(self)
    def normalize(self): return _stann.DPoint_1d_Double_normalize(self)
DPoint_1d_Double_swigregister = _stann.DPoint_1d_Double_swigregister
DPoint_1d_Double_swigregister(DPoint_1d_Double)

class DPoint_2d_UShort(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_2d_UShort, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_2d_UShort, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_2d_UShort_point_begin(self)
    def point_end(self): return _stann.DPoint_2d_UShort_point_end(self)
    __DIM = _stann.DPoint_2d_UShort___DIM
    def move2origin(self): return _stann.DPoint_2d_UShort_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_2d_UShort(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_2d_UShort
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_2d_UShort_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_2d_UShort_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_2d_UShort_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_2d_UShort_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_2d_UShort_sqr_length(self)
    def normalize(self): return _stann.DPoint_2d_UShort_normalize(self)
DPoint_2d_UShort_swigregister = _stann.DPoint_2d_UShort_swigregister
DPoint_2d_UShort_swigregister(DPoint_2d_UShort)

class DPoint_2d_Short(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_2d_Short, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_2d_Short, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_2d_Short_point_begin(self)
    def point_end(self): return _stann.DPoint_2d_Short_point_end(self)
    __DIM = _stann.DPoint_2d_Short___DIM
    def move2origin(self): return _stann.DPoint_2d_Short_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_2d_Short(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_2d_Short
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_2d_Short_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_2d_Short_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_2d_Short_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_2d_Short_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_2d_Short_sqr_length(self)
    def normalize(self): return _stann.DPoint_2d_Short_normalize(self)
DPoint_2d_Short_swigregister = _stann.DPoint_2d_Short_swigregister
DPoint_2d_Short_swigregister(DPoint_2d_Short)

class DPoint_2d_UInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_2d_UInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_2d_UInt, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_2d_UInt_point_begin(self)
    def point_end(self): return _stann.DPoint_2d_UInt_point_end(self)
    __DIM = _stann.DPoint_2d_UInt___DIM
    def move2origin(self): return _stann.DPoint_2d_UInt_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_2d_UInt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_2d_UInt
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_2d_UInt_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_2d_UInt_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_2d_UInt_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_2d_UInt_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_2d_UInt_sqr_length(self)
    def normalize(self): return _stann.DPoint_2d_UInt_normalize(self)
DPoint_2d_UInt_swigregister = _stann.DPoint_2d_UInt_swigregister
DPoint_2d_UInt_swigregister(DPoint_2d_UInt)

class DPoint_2d_Int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_2d_Int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_2d_Int, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_2d_Int_point_begin(self)
    def point_end(self): return _stann.DPoint_2d_Int_point_end(self)
    __DIM = _stann.DPoint_2d_Int___DIM
    def move2origin(self): return _stann.DPoint_2d_Int_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_2d_Int(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_2d_Int
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_2d_Int_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_2d_Int_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_2d_Int_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_2d_Int_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_2d_Int_sqr_length(self)
    def normalize(self): return _stann.DPoint_2d_Int_normalize(self)
DPoint_2d_Int_swigregister = _stann.DPoint_2d_Int_swigregister
DPoint_2d_Int_swigregister(DPoint_2d_Int)

class DPoint_2d_ULong(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_2d_ULong, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_2d_ULong, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_2d_ULong_point_begin(self)
    def point_end(self): return _stann.DPoint_2d_ULong_point_end(self)
    __DIM = _stann.DPoint_2d_ULong___DIM
    def move2origin(self): return _stann.DPoint_2d_ULong_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_2d_ULong(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_2d_ULong
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_2d_ULong_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_2d_ULong_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_2d_ULong_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_2d_ULong_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_2d_ULong_sqr_length(self)
    def normalize(self): return _stann.DPoint_2d_ULong_normalize(self)
DPoint_2d_ULong_swigregister = _stann.DPoint_2d_ULong_swigregister
DPoint_2d_ULong_swigregister(DPoint_2d_ULong)

class DPoint_2d_Long(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_2d_Long, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_2d_Long, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_2d_Long_point_begin(self)
    def point_end(self): return _stann.DPoint_2d_Long_point_end(self)
    __DIM = _stann.DPoint_2d_Long___DIM
    def move2origin(self): return _stann.DPoint_2d_Long_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_2d_Long(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_2d_Long
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_2d_Long_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_2d_Long_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_2d_Long_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_2d_Long_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_2d_Long_sqr_length(self)
    def normalize(self): return _stann.DPoint_2d_Long_normalize(self)
DPoint_2d_Long_swigregister = _stann.DPoint_2d_Long_swigregister
DPoint_2d_Long_swigregister(DPoint_2d_Long)

class DPoint_2d_Float(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_2d_Float, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_2d_Float, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_2d_Float_point_begin(self)
    def point_end(self): return _stann.DPoint_2d_Float_point_end(self)
    __DIM = _stann.DPoint_2d_Float___DIM
    def move2origin(self): return _stann.DPoint_2d_Float_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_2d_Float(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_2d_Float
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_2d_Float_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_2d_Float_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_2d_Float_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_2d_Float_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_2d_Float_sqr_length(self)
    def normalize(self): return _stann.DPoint_2d_Float_normalize(self)
DPoint_2d_Float_swigregister = _stann.DPoint_2d_Float_swigregister
DPoint_2d_Float_swigregister(DPoint_2d_Float)

class DPoint_2d_Double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_2d_Double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_2d_Double, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_2d_Double_point_begin(self)
    def point_end(self): return _stann.DPoint_2d_Double_point_end(self)
    __DIM = _stann.DPoint_2d_Double___DIM
    def move2origin(self): return _stann.DPoint_2d_Double_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_2d_Double(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_2d_Double
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_2d_Double_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_2d_Double_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_2d_Double_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_2d_Double_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_2d_Double_sqr_length(self)
    def normalize(self): return _stann.DPoint_2d_Double_normalize(self)
DPoint_2d_Double_swigregister = _stann.DPoint_2d_Double_swigregister
DPoint_2d_Double_swigregister(DPoint_2d_Double)

class DPoint_3d_UShort(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_3d_UShort, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_3d_UShort, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_3d_UShort_point_begin(self)
    def point_end(self): return _stann.DPoint_3d_UShort_point_end(self)
    __DIM = _stann.DPoint_3d_UShort___DIM
    def move2origin(self): return _stann.DPoint_3d_UShort_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_3d_UShort(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_3d_UShort
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_3d_UShort_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_3d_UShort_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_3d_UShort_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_3d_UShort_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_3d_UShort_sqr_length(self)
    def normalize(self): return _stann.DPoint_3d_UShort_normalize(self)
DPoint_3d_UShort_swigregister = _stann.DPoint_3d_UShort_swigregister
DPoint_3d_UShort_swigregister(DPoint_3d_UShort)

class DPoint_3d_Short(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_3d_Short, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_3d_Short, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_3d_Short_point_begin(self)
    def point_end(self): return _stann.DPoint_3d_Short_point_end(self)
    __DIM = _stann.DPoint_3d_Short___DIM
    def move2origin(self): return _stann.DPoint_3d_Short_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_3d_Short(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_3d_Short
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_3d_Short_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_3d_Short_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_3d_Short_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_3d_Short_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_3d_Short_sqr_length(self)
    def normalize(self): return _stann.DPoint_3d_Short_normalize(self)
DPoint_3d_Short_swigregister = _stann.DPoint_3d_Short_swigregister
DPoint_3d_Short_swigregister(DPoint_3d_Short)

class DPoint_3d_UInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_3d_UInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_3d_UInt, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_3d_UInt_point_begin(self)
    def point_end(self): return _stann.DPoint_3d_UInt_point_end(self)
    __DIM = _stann.DPoint_3d_UInt___DIM
    def move2origin(self): return _stann.DPoint_3d_UInt_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_3d_UInt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_3d_UInt
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_3d_UInt_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_3d_UInt_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_3d_UInt_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_3d_UInt_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_3d_UInt_sqr_length(self)
    def normalize(self): return _stann.DPoint_3d_UInt_normalize(self)
DPoint_3d_UInt_swigregister = _stann.DPoint_3d_UInt_swigregister
DPoint_3d_UInt_swigregister(DPoint_3d_UInt)

class DPoint_3d_Int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_3d_Int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_3d_Int, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_3d_Int_point_begin(self)
    def point_end(self): return _stann.DPoint_3d_Int_point_end(self)
    __DIM = _stann.DPoint_3d_Int___DIM
    def move2origin(self): return _stann.DPoint_3d_Int_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_3d_Int(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_3d_Int
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_3d_Int_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_3d_Int_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_3d_Int_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_3d_Int_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_3d_Int_sqr_length(self)
    def normalize(self): return _stann.DPoint_3d_Int_normalize(self)
DPoint_3d_Int_swigregister = _stann.DPoint_3d_Int_swigregister
DPoint_3d_Int_swigregister(DPoint_3d_Int)

class DPoint_3d_ULong(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_3d_ULong, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_3d_ULong, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_3d_ULong_point_begin(self)
    def point_end(self): return _stann.DPoint_3d_ULong_point_end(self)
    __DIM = _stann.DPoint_3d_ULong___DIM
    def move2origin(self): return _stann.DPoint_3d_ULong_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_3d_ULong(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_3d_ULong
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_3d_ULong_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_3d_ULong_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_3d_ULong_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_3d_ULong_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_3d_ULong_sqr_length(self)
    def normalize(self): return _stann.DPoint_3d_ULong_normalize(self)
DPoint_3d_ULong_swigregister = _stann.DPoint_3d_ULong_swigregister
DPoint_3d_ULong_swigregister(DPoint_3d_ULong)

class DPoint_3d_Long(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_3d_Long, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_3d_Long, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_3d_Long_point_begin(self)
    def point_end(self): return _stann.DPoint_3d_Long_point_end(self)
    __DIM = _stann.DPoint_3d_Long___DIM
    def move2origin(self): return _stann.DPoint_3d_Long_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_3d_Long(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_3d_Long
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_3d_Long_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_3d_Long_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_3d_Long_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_3d_Long_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_3d_Long_sqr_length(self)
    def normalize(self): return _stann.DPoint_3d_Long_normalize(self)
DPoint_3d_Long_swigregister = _stann.DPoint_3d_Long_swigregister
DPoint_3d_Long_swigregister(DPoint_3d_Long)

class DPoint_3d_Float(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_3d_Float, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_3d_Float, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_3d_Float_point_begin(self)
    def point_end(self): return _stann.DPoint_3d_Float_point_end(self)
    __DIM = _stann.DPoint_3d_Float___DIM
    def move2origin(self): return _stann.DPoint_3d_Float_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_3d_Float(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_3d_Float
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_3d_Float_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_3d_Float_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_3d_Float_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_3d_Float_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_3d_Float_sqr_length(self)
    def normalize(self): return _stann.DPoint_3d_Float_normalize(self)
DPoint_3d_Float_swigregister = _stann.DPoint_3d_Float_swigregister
DPoint_3d_Float_swigregister(DPoint_3d_Float)

class DPoint_3d_Double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_3d_Double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_3d_Double, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_3d_Double_point_begin(self)
    def point_end(self): return _stann.DPoint_3d_Double_point_end(self)
    __DIM = _stann.DPoint_3d_Double___DIM
    def move2origin(self): return _stann.DPoint_3d_Double_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_3d_Double(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_3d_Double
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_3d_Double_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_3d_Double_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_3d_Double_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_3d_Double_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_3d_Double_sqr_length(self)
    def normalize(self): return _stann.DPoint_3d_Double_normalize(self)
DPoint_3d_Double_swigregister = _stann.DPoint_3d_Double_swigregister
DPoint_3d_Double_swigregister(DPoint_3d_Double)

class DPoint_4d_UShort(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_4d_UShort, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_4d_UShort, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_4d_UShort_point_begin(self)
    def point_end(self): return _stann.DPoint_4d_UShort_point_end(self)
    __DIM = _stann.DPoint_4d_UShort___DIM
    def move2origin(self): return _stann.DPoint_4d_UShort_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_4d_UShort(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_4d_UShort
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_4d_UShort_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_4d_UShort_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_4d_UShort_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_4d_UShort_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_4d_UShort_sqr_length(self)
    def normalize(self): return _stann.DPoint_4d_UShort_normalize(self)
DPoint_4d_UShort_swigregister = _stann.DPoint_4d_UShort_swigregister
DPoint_4d_UShort_swigregister(DPoint_4d_UShort)

class DPoint_4d_Short(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_4d_Short, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_4d_Short, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_4d_Short_point_begin(self)
    def point_end(self): return _stann.DPoint_4d_Short_point_end(self)
    __DIM = _stann.DPoint_4d_Short___DIM
    def move2origin(self): return _stann.DPoint_4d_Short_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_4d_Short(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_4d_Short
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_4d_Short_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_4d_Short_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_4d_Short_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_4d_Short_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_4d_Short_sqr_length(self)
    def normalize(self): return _stann.DPoint_4d_Short_normalize(self)
DPoint_4d_Short_swigregister = _stann.DPoint_4d_Short_swigregister
DPoint_4d_Short_swigregister(DPoint_4d_Short)

class DPoint_4d_UInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_4d_UInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_4d_UInt, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_4d_UInt_point_begin(self)
    def point_end(self): return _stann.DPoint_4d_UInt_point_end(self)
    __DIM = _stann.DPoint_4d_UInt___DIM
    def move2origin(self): return _stann.DPoint_4d_UInt_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_4d_UInt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_4d_UInt
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_4d_UInt_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_4d_UInt_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_4d_UInt_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_4d_UInt_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_4d_UInt_sqr_length(self)
    def normalize(self): return _stann.DPoint_4d_UInt_normalize(self)
DPoint_4d_UInt_swigregister = _stann.DPoint_4d_UInt_swigregister
DPoint_4d_UInt_swigregister(DPoint_4d_UInt)

class DPoint_4d_Int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_4d_Int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_4d_Int, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_4d_Int_point_begin(self)
    def point_end(self): return _stann.DPoint_4d_Int_point_end(self)
    __DIM = _stann.DPoint_4d_Int___DIM
    def move2origin(self): return _stann.DPoint_4d_Int_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_4d_Int(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_4d_Int
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_4d_Int_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_4d_Int_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_4d_Int_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_4d_Int_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_4d_Int_sqr_length(self)
    def normalize(self): return _stann.DPoint_4d_Int_normalize(self)
DPoint_4d_Int_swigregister = _stann.DPoint_4d_Int_swigregister
DPoint_4d_Int_swigregister(DPoint_4d_Int)

class DPoint_4d_ULong(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_4d_ULong, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_4d_ULong, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_4d_ULong_point_begin(self)
    def point_end(self): return _stann.DPoint_4d_ULong_point_end(self)
    __DIM = _stann.DPoint_4d_ULong___DIM
    def move2origin(self): return _stann.DPoint_4d_ULong_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_4d_ULong(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_4d_ULong
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_4d_ULong_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_4d_ULong_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_4d_ULong_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_4d_ULong_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_4d_ULong_sqr_length(self)
    def normalize(self): return _stann.DPoint_4d_ULong_normalize(self)
DPoint_4d_ULong_swigregister = _stann.DPoint_4d_ULong_swigregister
DPoint_4d_ULong_swigregister(DPoint_4d_ULong)

class DPoint_4d_Long(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_4d_Long, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_4d_Long, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_4d_Long_point_begin(self)
    def point_end(self): return _stann.DPoint_4d_Long_point_end(self)
    __DIM = _stann.DPoint_4d_Long___DIM
    def move2origin(self): return _stann.DPoint_4d_Long_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_4d_Long(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_4d_Long
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_4d_Long_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_4d_Long_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_4d_Long_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_4d_Long_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_4d_Long_sqr_length(self)
    def normalize(self): return _stann.DPoint_4d_Long_normalize(self)
DPoint_4d_Long_swigregister = _stann.DPoint_4d_Long_swigregister
DPoint_4d_Long_swigregister(DPoint_4d_Long)

class DPoint_4d_Float(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_4d_Float, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_4d_Float, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_4d_Float_point_begin(self)
    def point_end(self): return _stann.DPoint_4d_Float_point_end(self)
    __DIM = _stann.DPoint_4d_Float___DIM
    def move2origin(self): return _stann.DPoint_4d_Float_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_4d_Float(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_4d_Float
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_4d_Float_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_4d_Float_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_4d_Float_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_4d_Float_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_4d_Float_sqr_length(self)
    def normalize(self): return _stann.DPoint_4d_Float_normalize(self)
DPoint_4d_Float_swigregister = _stann.DPoint_4d_Float_swigregister
DPoint_4d_Float_swigregister(DPoint_4d_Float)

class DPoint_4d_Double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_4d_Double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_4d_Double, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_4d_Double_point_begin(self)
    def point_end(self): return _stann.DPoint_4d_Double_point_end(self)
    __DIM = _stann.DPoint_4d_Double___DIM
    def move2origin(self): return _stann.DPoint_4d_Double_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_4d_Double(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_4d_Double
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_4d_Double_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_4d_Double_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_4d_Double_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_4d_Double_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_4d_Double_sqr_length(self)
    def normalize(self): return _stann.DPoint_4d_Double_normalize(self)
DPoint_4d_Double_swigregister = _stann.DPoint_4d_Double_swigregister
DPoint_4d_Double_swigregister(DPoint_4d_Double)

class DPoint_5d_UShort(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_5d_UShort, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_5d_UShort, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_5d_UShort_point_begin(self)
    def point_end(self): return _stann.DPoint_5d_UShort_point_end(self)
    __DIM = _stann.DPoint_5d_UShort___DIM
    def move2origin(self): return _stann.DPoint_5d_UShort_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_5d_UShort(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_5d_UShort
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_5d_UShort_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_5d_UShort_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_5d_UShort_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_5d_UShort_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_5d_UShort_sqr_length(self)
    def normalize(self): return _stann.DPoint_5d_UShort_normalize(self)
DPoint_5d_UShort_swigregister = _stann.DPoint_5d_UShort_swigregister
DPoint_5d_UShort_swigregister(DPoint_5d_UShort)

class DPoint_5d_Short(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_5d_Short, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_5d_Short, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_5d_Short_point_begin(self)
    def point_end(self): return _stann.DPoint_5d_Short_point_end(self)
    __DIM = _stann.DPoint_5d_Short___DIM
    def move2origin(self): return _stann.DPoint_5d_Short_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_5d_Short(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_5d_Short
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_5d_Short_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_5d_Short_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_5d_Short_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_5d_Short_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_5d_Short_sqr_length(self)
    def normalize(self): return _stann.DPoint_5d_Short_normalize(self)
DPoint_5d_Short_swigregister = _stann.DPoint_5d_Short_swigregister
DPoint_5d_Short_swigregister(DPoint_5d_Short)

class DPoint_5d_UInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_5d_UInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_5d_UInt, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_5d_UInt_point_begin(self)
    def point_end(self): return _stann.DPoint_5d_UInt_point_end(self)
    __DIM = _stann.DPoint_5d_UInt___DIM
    def move2origin(self): return _stann.DPoint_5d_UInt_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_5d_UInt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_5d_UInt
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_5d_UInt_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_5d_UInt_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_5d_UInt_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_5d_UInt_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_5d_UInt_sqr_length(self)
    def normalize(self): return _stann.DPoint_5d_UInt_normalize(self)
DPoint_5d_UInt_swigregister = _stann.DPoint_5d_UInt_swigregister
DPoint_5d_UInt_swigregister(DPoint_5d_UInt)

class DPoint_5d_Int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_5d_Int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_5d_Int, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_5d_Int_point_begin(self)
    def point_end(self): return _stann.DPoint_5d_Int_point_end(self)
    __DIM = _stann.DPoint_5d_Int___DIM
    def move2origin(self): return _stann.DPoint_5d_Int_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_5d_Int(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_5d_Int
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_5d_Int_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_5d_Int_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_5d_Int_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_5d_Int_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_5d_Int_sqr_length(self)
    def normalize(self): return _stann.DPoint_5d_Int_normalize(self)
DPoint_5d_Int_swigregister = _stann.DPoint_5d_Int_swigregister
DPoint_5d_Int_swigregister(DPoint_5d_Int)

class DPoint_5d_ULong(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_5d_ULong, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_5d_ULong, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_5d_ULong_point_begin(self)
    def point_end(self): return _stann.DPoint_5d_ULong_point_end(self)
    __DIM = _stann.DPoint_5d_ULong___DIM
    def move2origin(self): return _stann.DPoint_5d_ULong_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_5d_ULong(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_5d_ULong
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_5d_ULong_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_5d_ULong_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_5d_ULong_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_5d_ULong_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_5d_ULong_sqr_length(self)
    def normalize(self): return _stann.DPoint_5d_ULong_normalize(self)
DPoint_5d_ULong_swigregister = _stann.DPoint_5d_ULong_swigregister
DPoint_5d_ULong_swigregister(DPoint_5d_ULong)

class DPoint_5d_Long(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_5d_Long, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_5d_Long, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_5d_Long_point_begin(self)
    def point_end(self): return _stann.DPoint_5d_Long_point_end(self)
    __DIM = _stann.DPoint_5d_Long___DIM
    def move2origin(self): return _stann.DPoint_5d_Long_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_5d_Long(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_5d_Long
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_5d_Long_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_5d_Long_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_5d_Long_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_5d_Long_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_5d_Long_sqr_length(self)
    def normalize(self): return _stann.DPoint_5d_Long_normalize(self)
DPoint_5d_Long_swigregister = _stann.DPoint_5d_Long_swigregister
DPoint_5d_Long_swigregister(DPoint_5d_Long)

class DPoint_5d_Float(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_5d_Float, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_5d_Float, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_5d_Float_point_begin(self)
    def point_end(self): return _stann.DPoint_5d_Float_point_end(self)
    __DIM = _stann.DPoint_5d_Float___DIM
    def move2origin(self): return _stann.DPoint_5d_Float_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_5d_Float(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_5d_Float
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_5d_Float_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_5d_Float_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_5d_Float_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_5d_Float_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_5d_Float_sqr_length(self)
    def normalize(self): return _stann.DPoint_5d_Float_normalize(self)
DPoint_5d_Float_swigregister = _stann.DPoint_5d_Float_swigregister
DPoint_5d_Float_swigregister(DPoint_5d_Float)

class DPoint_5d_Double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPoint_5d_Double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPoint_5d_Double, name)
    __repr__ = _swig_repr
    def point_begin(self): return _stann.DPoint_5d_Double_point_begin(self)
    def point_end(self): return _stann.DPoint_5d_Double_point_end(self)
    __DIM = _stann.DPoint_5d_Double___DIM
    def move2origin(self): return _stann.DPoint_5d_Double_move2origin(self)
    def __init__(self, *args): 
        this = _stann.new_DPoint_5d_Double(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_DPoint_5d_Double
    __del__ = lambda self : None;
    def dim(self): return _stann.DPoint_5d_Double_dim(self)
    def sqr_dist(self, *args): return _stann.DPoint_5d_Double_sqr_dist(self, *args)
    def distance(self, *args): return _stann.DPoint_5d_Double_distance(self, *args)
    def dotprod(self, *args): return _stann.DPoint_5d_Double_dotprod(self, *args)
    def sqr_length(self): return _stann.DPoint_5d_Double_sqr_length(self)
    def normalize(self): return _stann.DPoint_5d_Double_normalize(self)
DPoint_5d_Double_swigregister = _stann.DPoint_5d_Double_swigregister
DPoint_5d_Double_swigregister(DPoint_5d_Double)

class Vector_DPoint_1d_UShort(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_1d_UShort, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_1d_UShort, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_1d_UShort_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_1d_UShort___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_1d_UShort___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_1d_UShort___len__(self)
    def pop(self): return _stann.Vector_DPoint_1d_UShort_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_1d_UShort___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_1d_UShort___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_1d_UShort___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_1d_UShort___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_1d_UShort___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_1d_UShort___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_1d_UShort_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_1d_UShort_empty(self)
    def size(self): return _stann.Vector_DPoint_1d_UShort_size(self)
    def clear(self): return _stann.Vector_DPoint_1d_UShort_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_1d_UShort_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_1d_UShort_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_1d_UShort_begin(self)
    def end(self): return _stann.Vector_DPoint_1d_UShort_end(self)
    def rbegin(self): return _stann.Vector_DPoint_1d_UShort_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_1d_UShort_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_1d_UShort_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_1d_UShort_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_1d_UShort(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_1d_UShort_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_1d_UShort_front(self)
    def back(self): return _stann.Vector_DPoint_1d_UShort_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_1d_UShort_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_1d_UShort_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_1d_UShort_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_1d_UShort_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_1d_UShort_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_1d_UShort
    __del__ = lambda self : None;
Vector_DPoint_1d_UShort_swigregister = _stann.Vector_DPoint_1d_UShort_swigregister
Vector_DPoint_1d_UShort_swigregister(Vector_DPoint_1d_UShort)

class Vector_DPoint_1d_Short(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_1d_Short, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_1d_Short, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_1d_Short_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_1d_Short___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_1d_Short___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_1d_Short___len__(self)
    def pop(self): return _stann.Vector_DPoint_1d_Short_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_1d_Short___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_1d_Short___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_1d_Short___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_1d_Short___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_1d_Short___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_1d_Short___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_1d_Short_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_1d_Short_empty(self)
    def size(self): return _stann.Vector_DPoint_1d_Short_size(self)
    def clear(self): return _stann.Vector_DPoint_1d_Short_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_1d_Short_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_1d_Short_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_1d_Short_begin(self)
    def end(self): return _stann.Vector_DPoint_1d_Short_end(self)
    def rbegin(self): return _stann.Vector_DPoint_1d_Short_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_1d_Short_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_1d_Short_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_1d_Short_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_1d_Short(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_1d_Short_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_1d_Short_front(self)
    def back(self): return _stann.Vector_DPoint_1d_Short_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_1d_Short_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_1d_Short_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_1d_Short_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_1d_Short_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_1d_Short_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_1d_Short
    __del__ = lambda self : None;
Vector_DPoint_1d_Short_swigregister = _stann.Vector_DPoint_1d_Short_swigregister
Vector_DPoint_1d_Short_swigregister(Vector_DPoint_1d_Short)

class Vector_DPoint_1d_UInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_1d_UInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_1d_UInt, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_1d_UInt_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_1d_UInt___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_1d_UInt___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_1d_UInt___len__(self)
    def pop(self): return _stann.Vector_DPoint_1d_UInt_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_1d_UInt___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_1d_UInt___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_1d_UInt___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_1d_UInt___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_1d_UInt___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_1d_UInt___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_1d_UInt_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_1d_UInt_empty(self)
    def size(self): return _stann.Vector_DPoint_1d_UInt_size(self)
    def clear(self): return _stann.Vector_DPoint_1d_UInt_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_1d_UInt_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_1d_UInt_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_1d_UInt_begin(self)
    def end(self): return _stann.Vector_DPoint_1d_UInt_end(self)
    def rbegin(self): return _stann.Vector_DPoint_1d_UInt_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_1d_UInt_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_1d_UInt_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_1d_UInt_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_1d_UInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_1d_UInt_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_1d_UInt_front(self)
    def back(self): return _stann.Vector_DPoint_1d_UInt_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_1d_UInt_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_1d_UInt_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_1d_UInt_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_1d_UInt_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_1d_UInt_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_1d_UInt
    __del__ = lambda self : None;
Vector_DPoint_1d_UInt_swigregister = _stann.Vector_DPoint_1d_UInt_swigregister
Vector_DPoint_1d_UInt_swigregister(Vector_DPoint_1d_UInt)

class Vector_DPoint_1d_Int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_1d_Int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_1d_Int, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_1d_Int_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_1d_Int___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_1d_Int___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_1d_Int___len__(self)
    def pop(self): return _stann.Vector_DPoint_1d_Int_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_1d_Int___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_1d_Int___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_1d_Int___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_1d_Int___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_1d_Int___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_1d_Int___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_1d_Int_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_1d_Int_empty(self)
    def size(self): return _stann.Vector_DPoint_1d_Int_size(self)
    def clear(self): return _stann.Vector_DPoint_1d_Int_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_1d_Int_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_1d_Int_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_1d_Int_begin(self)
    def end(self): return _stann.Vector_DPoint_1d_Int_end(self)
    def rbegin(self): return _stann.Vector_DPoint_1d_Int_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_1d_Int_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_1d_Int_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_1d_Int_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_1d_Int(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_1d_Int_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_1d_Int_front(self)
    def back(self): return _stann.Vector_DPoint_1d_Int_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_1d_Int_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_1d_Int_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_1d_Int_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_1d_Int_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_1d_Int_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_1d_Int
    __del__ = lambda self : None;
Vector_DPoint_1d_Int_swigregister = _stann.Vector_DPoint_1d_Int_swigregister
Vector_DPoint_1d_Int_swigregister(Vector_DPoint_1d_Int)

class Vector_DPoint_1d_ULong(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_1d_ULong, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_1d_ULong, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_1d_ULong_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_1d_ULong___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_1d_ULong___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_1d_ULong___len__(self)
    def pop(self): return _stann.Vector_DPoint_1d_ULong_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_1d_ULong___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_1d_ULong___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_1d_ULong___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_1d_ULong___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_1d_ULong___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_1d_ULong___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_1d_ULong_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_1d_ULong_empty(self)
    def size(self): return _stann.Vector_DPoint_1d_ULong_size(self)
    def clear(self): return _stann.Vector_DPoint_1d_ULong_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_1d_ULong_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_1d_ULong_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_1d_ULong_begin(self)
    def end(self): return _stann.Vector_DPoint_1d_ULong_end(self)
    def rbegin(self): return _stann.Vector_DPoint_1d_ULong_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_1d_ULong_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_1d_ULong_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_1d_ULong_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_1d_ULong(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_1d_ULong_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_1d_ULong_front(self)
    def back(self): return _stann.Vector_DPoint_1d_ULong_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_1d_ULong_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_1d_ULong_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_1d_ULong_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_1d_ULong_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_1d_ULong_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_1d_ULong
    __del__ = lambda self : None;
Vector_DPoint_1d_ULong_swigregister = _stann.Vector_DPoint_1d_ULong_swigregister
Vector_DPoint_1d_ULong_swigregister(Vector_DPoint_1d_ULong)

class Vector_DPoint_1d_Long(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_1d_Long, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_1d_Long, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_1d_Long_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_1d_Long___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_1d_Long___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_1d_Long___len__(self)
    def pop(self): return _stann.Vector_DPoint_1d_Long_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_1d_Long___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_1d_Long___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_1d_Long___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_1d_Long___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_1d_Long___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_1d_Long___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_1d_Long_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_1d_Long_empty(self)
    def size(self): return _stann.Vector_DPoint_1d_Long_size(self)
    def clear(self): return _stann.Vector_DPoint_1d_Long_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_1d_Long_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_1d_Long_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_1d_Long_begin(self)
    def end(self): return _stann.Vector_DPoint_1d_Long_end(self)
    def rbegin(self): return _stann.Vector_DPoint_1d_Long_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_1d_Long_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_1d_Long_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_1d_Long_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_1d_Long(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_1d_Long_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_1d_Long_front(self)
    def back(self): return _stann.Vector_DPoint_1d_Long_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_1d_Long_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_1d_Long_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_1d_Long_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_1d_Long_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_1d_Long_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_1d_Long
    __del__ = lambda self : None;
Vector_DPoint_1d_Long_swigregister = _stann.Vector_DPoint_1d_Long_swigregister
Vector_DPoint_1d_Long_swigregister(Vector_DPoint_1d_Long)

class Vector_DPoint_1d_Float(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_1d_Float, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_1d_Float, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_1d_Float_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_1d_Float___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_1d_Float___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_1d_Float___len__(self)
    def pop(self): return _stann.Vector_DPoint_1d_Float_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_1d_Float___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_1d_Float___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_1d_Float___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_1d_Float___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_1d_Float___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_1d_Float___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_1d_Float_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_1d_Float_empty(self)
    def size(self): return _stann.Vector_DPoint_1d_Float_size(self)
    def clear(self): return _stann.Vector_DPoint_1d_Float_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_1d_Float_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_1d_Float_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_1d_Float_begin(self)
    def end(self): return _stann.Vector_DPoint_1d_Float_end(self)
    def rbegin(self): return _stann.Vector_DPoint_1d_Float_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_1d_Float_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_1d_Float_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_1d_Float_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_1d_Float(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_1d_Float_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_1d_Float_front(self)
    def back(self): return _stann.Vector_DPoint_1d_Float_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_1d_Float_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_1d_Float_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_1d_Float_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_1d_Float_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_1d_Float_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_1d_Float
    __del__ = lambda self : None;
Vector_DPoint_1d_Float_swigregister = _stann.Vector_DPoint_1d_Float_swigregister
Vector_DPoint_1d_Float_swigregister(Vector_DPoint_1d_Float)

class Vector_DPoint_1d_Double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_1d_Double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_1d_Double, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_1d_Double_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_1d_Double___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_1d_Double___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_1d_Double___len__(self)
    def pop(self): return _stann.Vector_DPoint_1d_Double_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_1d_Double___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_1d_Double___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_1d_Double___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_1d_Double___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_1d_Double___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_1d_Double___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_1d_Double_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_1d_Double_empty(self)
    def size(self): return _stann.Vector_DPoint_1d_Double_size(self)
    def clear(self): return _stann.Vector_DPoint_1d_Double_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_1d_Double_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_1d_Double_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_1d_Double_begin(self)
    def end(self): return _stann.Vector_DPoint_1d_Double_end(self)
    def rbegin(self): return _stann.Vector_DPoint_1d_Double_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_1d_Double_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_1d_Double_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_1d_Double_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_1d_Double(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_1d_Double_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_1d_Double_front(self)
    def back(self): return _stann.Vector_DPoint_1d_Double_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_1d_Double_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_1d_Double_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_1d_Double_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_1d_Double_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_1d_Double_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_1d_Double
    __del__ = lambda self : None;
Vector_DPoint_1d_Double_swigregister = _stann.Vector_DPoint_1d_Double_swigregister
Vector_DPoint_1d_Double_swigregister(Vector_DPoint_1d_Double)

class Vector_DPoint_2d_UShort(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_2d_UShort, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_2d_UShort, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_2d_UShort_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_2d_UShort___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_2d_UShort___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_2d_UShort___len__(self)
    def pop(self): return _stann.Vector_DPoint_2d_UShort_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_2d_UShort___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_2d_UShort___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_2d_UShort___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_2d_UShort___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_2d_UShort___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_2d_UShort___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_2d_UShort_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_2d_UShort_empty(self)
    def size(self): return _stann.Vector_DPoint_2d_UShort_size(self)
    def clear(self): return _stann.Vector_DPoint_2d_UShort_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_2d_UShort_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_2d_UShort_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_2d_UShort_begin(self)
    def end(self): return _stann.Vector_DPoint_2d_UShort_end(self)
    def rbegin(self): return _stann.Vector_DPoint_2d_UShort_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_2d_UShort_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_2d_UShort_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_2d_UShort_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_2d_UShort(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_2d_UShort_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_2d_UShort_front(self)
    def back(self): return _stann.Vector_DPoint_2d_UShort_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_2d_UShort_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_2d_UShort_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_2d_UShort_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_2d_UShort_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_2d_UShort_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_2d_UShort
    __del__ = lambda self : None;
Vector_DPoint_2d_UShort_swigregister = _stann.Vector_DPoint_2d_UShort_swigregister
Vector_DPoint_2d_UShort_swigregister(Vector_DPoint_2d_UShort)

class Vector_DPoint_2d_Short(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_2d_Short, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_2d_Short, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_2d_Short_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_2d_Short___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_2d_Short___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_2d_Short___len__(self)
    def pop(self): return _stann.Vector_DPoint_2d_Short_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_2d_Short___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_2d_Short___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_2d_Short___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_2d_Short___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_2d_Short___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_2d_Short___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_2d_Short_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_2d_Short_empty(self)
    def size(self): return _stann.Vector_DPoint_2d_Short_size(self)
    def clear(self): return _stann.Vector_DPoint_2d_Short_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_2d_Short_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_2d_Short_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_2d_Short_begin(self)
    def end(self): return _stann.Vector_DPoint_2d_Short_end(self)
    def rbegin(self): return _stann.Vector_DPoint_2d_Short_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_2d_Short_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_2d_Short_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_2d_Short_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_2d_Short(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_2d_Short_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_2d_Short_front(self)
    def back(self): return _stann.Vector_DPoint_2d_Short_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_2d_Short_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_2d_Short_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_2d_Short_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_2d_Short_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_2d_Short_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_2d_Short
    __del__ = lambda self : None;
Vector_DPoint_2d_Short_swigregister = _stann.Vector_DPoint_2d_Short_swigregister
Vector_DPoint_2d_Short_swigregister(Vector_DPoint_2d_Short)

class Vector_DPoint_2d_UInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_2d_UInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_2d_UInt, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_2d_UInt_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_2d_UInt___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_2d_UInt___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_2d_UInt___len__(self)
    def pop(self): return _stann.Vector_DPoint_2d_UInt_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_2d_UInt___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_2d_UInt___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_2d_UInt___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_2d_UInt___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_2d_UInt___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_2d_UInt___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_2d_UInt_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_2d_UInt_empty(self)
    def size(self): return _stann.Vector_DPoint_2d_UInt_size(self)
    def clear(self): return _stann.Vector_DPoint_2d_UInt_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_2d_UInt_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_2d_UInt_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_2d_UInt_begin(self)
    def end(self): return _stann.Vector_DPoint_2d_UInt_end(self)
    def rbegin(self): return _stann.Vector_DPoint_2d_UInt_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_2d_UInt_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_2d_UInt_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_2d_UInt_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_2d_UInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_2d_UInt_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_2d_UInt_front(self)
    def back(self): return _stann.Vector_DPoint_2d_UInt_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_2d_UInt_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_2d_UInt_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_2d_UInt_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_2d_UInt_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_2d_UInt_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_2d_UInt
    __del__ = lambda self : None;
Vector_DPoint_2d_UInt_swigregister = _stann.Vector_DPoint_2d_UInt_swigregister
Vector_DPoint_2d_UInt_swigregister(Vector_DPoint_2d_UInt)

class Vector_DPoint_2d_Int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_2d_Int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_2d_Int, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_2d_Int_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_2d_Int___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_2d_Int___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_2d_Int___len__(self)
    def pop(self): return _stann.Vector_DPoint_2d_Int_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_2d_Int___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_2d_Int___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_2d_Int___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_2d_Int___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_2d_Int___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_2d_Int___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_2d_Int_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_2d_Int_empty(self)
    def size(self): return _stann.Vector_DPoint_2d_Int_size(self)
    def clear(self): return _stann.Vector_DPoint_2d_Int_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_2d_Int_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_2d_Int_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_2d_Int_begin(self)
    def end(self): return _stann.Vector_DPoint_2d_Int_end(self)
    def rbegin(self): return _stann.Vector_DPoint_2d_Int_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_2d_Int_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_2d_Int_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_2d_Int_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_2d_Int(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_2d_Int_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_2d_Int_front(self)
    def back(self): return _stann.Vector_DPoint_2d_Int_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_2d_Int_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_2d_Int_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_2d_Int_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_2d_Int_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_2d_Int_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_2d_Int
    __del__ = lambda self : None;
Vector_DPoint_2d_Int_swigregister = _stann.Vector_DPoint_2d_Int_swigregister
Vector_DPoint_2d_Int_swigregister(Vector_DPoint_2d_Int)

class Vector_DPoint_2d_ULong(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_2d_ULong, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_2d_ULong, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_2d_ULong_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_2d_ULong___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_2d_ULong___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_2d_ULong___len__(self)
    def pop(self): return _stann.Vector_DPoint_2d_ULong_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_2d_ULong___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_2d_ULong___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_2d_ULong___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_2d_ULong___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_2d_ULong___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_2d_ULong___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_2d_ULong_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_2d_ULong_empty(self)
    def size(self): return _stann.Vector_DPoint_2d_ULong_size(self)
    def clear(self): return _stann.Vector_DPoint_2d_ULong_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_2d_ULong_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_2d_ULong_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_2d_ULong_begin(self)
    def end(self): return _stann.Vector_DPoint_2d_ULong_end(self)
    def rbegin(self): return _stann.Vector_DPoint_2d_ULong_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_2d_ULong_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_2d_ULong_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_2d_ULong_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_2d_ULong(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_2d_ULong_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_2d_ULong_front(self)
    def back(self): return _stann.Vector_DPoint_2d_ULong_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_2d_ULong_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_2d_ULong_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_2d_ULong_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_2d_ULong_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_2d_ULong_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_2d_ULong
    __del__ = lambda self : None;
Vector_DPoint_2d_ULong_swigregister = _stann.Vector_DPoint_2d_ULong_swigregister
Vector_DPoint_2d_ULong_swigregister(Vector_DPoint_2d_ULong)

class Vector_DPoint_2d_Long(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_2d_Long, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_2d_Long, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_2d_Long_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_2d_Long___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_2d_Long___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_2d_Long___len__(self)
    def pop(self): return _stann.Vector_DPoint_2d_Long_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_2d_Long___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_2d_Long___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_2d_Long___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_2d_Long___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_2d_Long___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_2d_Long___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_2d_Long_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_2d_Long_empty(self)
    def size(self): return _stann.Vector_DPoint_2d_Long_size(self)
    def clear(self): return _stann.Vector_DPoint_2d_Long_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_2d_Long_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_2d_Long_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_2d_Long_begin(self)
    def end(self): return _stann.Vector_DPoint_2d_Long_end(self)
    def rbegin(self): return _stann.Vector_DPoint_2d_Long_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_2d_Long_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_2d_Long_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_2d_Long_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_2d_Long(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_2d_Long_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_2d_Long_front(self)
    def back(self): return _stann.Vector_DPoint_2d_Long_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_2d_Long_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_2d_Long_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_2d_Long_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_2d_Long_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_2d_Long_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_2d_Long
    __del__ = lambda self : None;
Vector_DPoint_2d_Long_swigregister = _stann.Vector_DPoint_2d_Long_swigregister
Vector_DPoint_2d_Long_swigregister(Vector_DPoint_2d_Long)

class Vector_DPoint_2d_Float(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_2d_Float, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_2d_Float, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_2d_Float_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_2d_Float___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_2d_Float___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_2d_Float___len__(self)
    def pop(self): return _stann.Vector_DPoint_2d_Float_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_2d_Float___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_2d_Float___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_2d_Float___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_2d_Float___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_2d_Float___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_2d_Float___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_2d_Float_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_2d_Float_empty(self)
    def size(self): return _stann.Vector_DPoint_2d_Float_size(self)
    def clear(self): return _stann.Vector_DPoint_2d_Float_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_2d_Float_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_2d_Float_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_2d_Float_begin(self)
    def end(self): return _stann.Vector_DPoint_2d_Float_end(self)
    def rbegin(self): return _stann.Vector_DPoint_2d_Float_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_2d_Float_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_2d_Float_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_2d_Float_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_2d_Float(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_2d_Float_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_2d_Float_front(self)
    def back(self): return _stann.Vector_DPoint_2d_Float_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_2d_Float_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_2d_Float_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_2d_Float_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_2d_Float_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_2d_Float_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_2d_Float
    __del__ = lambda self : None;
Vector_DPoint_2d_Float_swigregister = _stann.Vector_DPoint_2d_Float_swigregister
Vector_DPoint_2d_Float_swigregister(Vector_DPoint_2d_Float)

class Vector_DPoint_2d_Double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_2d_Double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_2d_Double, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_2d_Double_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_2d_Double___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_2d_Double___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_2d_Double___len__(self)
    def pop(self): return _stann.Vector_DPoint_2d_Double_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_2d_Double___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_2d_Double___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_2d_Double___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_2d_Double___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_2d_Double___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_2d_Double___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_2d_Double_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_2d_Double_empty(self)
    def size(self): return _stann.Vector_DPoint_2d_Double_size(self)
    def clear(self): return _stann.Vector_DPoint_2d_Double_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_2d_Double_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_2d_Double_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_2d_Double_begin(self)
    def end(self): return _stann.Vector_DPoint_2d_Double_end(self)
    def rbegin(self): return _stann.Vector_DPoint_2d_Double_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_2d_Double_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_2d_Double_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_2d_Double_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_2d_Double(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_2d_Double_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_2d_Double_front(self)
    def back(self): return _stann.Vector_DPoint_2d_Double_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_2d_Double_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_2d_Double_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_2d_Double_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_2d_Double_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_2d_Double_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_2d_Double
    __del__ = lambda self : None;
Vector_DPoint_2d_Double_swigregister = _stann.Vector_DPoint_2d_Double_swigregister
Vector_DPoint_2d_Double_swigregister(Vector_DPoint_2d_Double)

class Vector_DPoint_3d_UShort(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_3d_UShort, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_3d_UShort, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_3d_UShort_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_3d_UShort___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_3d_UShort___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_3d_UShort___len__(self)
    def pop(self): return _stann.Vector_DPoint_3d_UShort_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_3d_UShort___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_3d_UShort___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_3d_UShort___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_3d_UShort___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_3d_UShort___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_3d_UShort___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_3d_UShort_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_3d_UShort_empty(self)
    def size(self): return _stann.Vector_DPoint_3d_UShort_size(self)
    def clear(self): return _stann.Vector_DPoint_3d_UShort_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_3d_UShort_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_3d_UShort_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_3d_UShort_begin(self)
    def end(self): return _stann.Vector_DPoint_3d_UShort_end(self)
    def rbegin(self): return _stann.Vector_DPoint_3d_UShort_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_3d_UShort_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_3d_UShort_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_3d_UShort_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_3d_UShort(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_3d_UShort_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_3d_UShort_front(self)
    def back(self): return _stann.Vector_DPoint_3d_UShort_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_3d_UShort_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_3d_UShort_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_3d_UShort_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_3d_UShort_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_3d_UShort_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_3d_UShort
    __del__ = lambda self : None;
Vector_DPoint_3d_UShort_swigregister = _stann.Vector_DPoint_3d_UShort_swigregister
Vector_DPoint_3d_UShort_swigregister(Vector_DPoint_3d_UShort)

class Vector_DPoint_3d_Short(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_3d_Short, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_3d_Short, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_3d_Short_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_3d_Short___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_3d_Short___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_3d_Short___len__(self)
    def pop(self): return _stann.Vector_DPoint_3d_Short_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_3d_Short___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_3d_Short___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_3d_Short___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_3d_Short___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_3d_Short___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_3d_Short___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_3d_Short_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_3d_Short_empty(self)
    def size(self): return _stann.Vector_DPoint_3d_Short_size(self)
    def clear(self): return _stann.Vector_DPoint_3d_Short_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_3d_Short_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_3d_Short_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_3d_Short_begin(self)
    def end(self): return _stann.Vector_DPoint_3d_Short_end(self)
    def rbegin(self): return _stann.Vector_DPoint_3d_Short_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_3d_Short_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_3d_Short_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_3d_Short_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_3d_Short(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_3d_Short_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_3d_Short_front(self)
    def back(self): return _stann.Vector_DPoint_3d_Short_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_3d_Short_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_3d_Short_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_3d_Short_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_3d_Short_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_3d_Short_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_3d_Short
    __del__ = lambda self : None;
Vector_DPoint_3d_Short_swigregister = _stann.Vector_DPoint_3d_Short_swigregister
Vector_DPoint_3d_Short_swigregister(Vector_DPoint_3d_Short)

class Vector_DPoint_3d_UInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_3d_UInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_3d_UInt, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_3d_UInt_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_3d_UInt___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_3d_UInt___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_3d_UInt___len__(self)
    def pop(self): return _stann.Vector_DPoint_3d_UInt_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_3d_UInt___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_3d_UInt___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_3d_UInt___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_3d_UInt___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_3d_UInt___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_3d_UInt___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_3d_UInt_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_3d_UInt_empty(self)
    def size(self): return _stann.Vector_DPoint_3d_UInt_size(self)
    def clear(self): return _stann.Vector_DPoint_3d_UInt_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_3d_UInt_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_3d_UInt_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_3d_UInt_begin(self)
    def end(self): return _stann.Vector_DPoint_3d_UInt_end(self)
    def rbegin(self): return _stann.Vector_DPoint_3d_UInt_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_3d_UInt_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_3d_UInt_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_3d_UInt_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_3d_UInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_3d_UInt_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_3d_UInt_front(self)
    def back(self): return _stann.Vector_DPoint_3d_UInt_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_3d_UInt_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_3d_UInt_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_3d_UInt_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_3d_UInt_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_3d_UInt_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_3d_UInt
    __del__ = lambda self : None;
Vector_DPoint_3d_UInt_swigregister = _stann.Vector_DPoint_3d_UInt_swigregister
Vector_DPoint_3d_UInt_swigregister(Vector_DPoint_3d_UInt)

class Vector_DPoint_3d_Int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_3d_Int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_3d_Int, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_3d_Int_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_3d_Int___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_3d_Int___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_3d_Int___len__(self)
    def pop(self): return _stann.Vector_DPoint_3d_Int_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_3d_Int___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_3d_Int___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_3d_Int___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_3d_Int___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_3d_Int___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_3d_Int___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_3d_Int_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_3d_Int_empty(self)
    def size(self): return _stann.Vector_DPoint_3d_Int_size(self)
    def clear(self): return _stann.Vector_DPoint_3d_Int_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_3d_Int_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_3d_Int_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_3d_Int_begin(self)
    def end(self): return _stann.Vector_DPoint_3d_Int_end(self)
    def rbegin(self): return _stann.Vector_DPoint_3d_Int_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_3d_Int_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_3d_Int_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_3d_Int_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_3d_Int(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_3d_Int_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_3d_Int_front(self)
    def back(self): return _stann.Vector_DPoint_3d_Int_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_3d_Int_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_3d_Int_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_3d_Int_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_3d_Int_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_3d_Int_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_3d_Int
    __del__ = lambda self : None;
Vector_DPoint_3d_Int_swigregister = _stann.Vector_DPoint_3d_Int_swigregister
Vector_DPoint_3d_Int_swigregister(Vector_DPoint_3d_Int)

class Vector_DPoint_3d_ULong(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_3d_ULong, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_3d_ULong, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_3d_ULong_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_3d_ULong___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_3d_ULong___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_3d_ULong___len__(self)
    def pop(self): return _stann.Vector_DPoint_3d_ULong_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_3d_ULong___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_3d_ULong___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_3d_ULong___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_3d_ULong___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_3d_ULong___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_3d_ULong___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_3d_ULong_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_3d_ULong_empty(self)
    def size(self): return _stann.Vector_DPoint_3d_ULong_size(self)
    def clear(self): return _stann.Vector_DPoint_3d_ULong_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_3d_ULong_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_3d_ULong_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_3d_ULong_begin(self)
    def end(self): return _stann.Vector_DPoint_3d_ULong_end(self)
    def rbegin(self): return _stann.Vector_DPoint_3d_ULong_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_3d_ULong_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_3d_ULong_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_3d_ULong_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_3d_ULong(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_3d_ULong_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_3d_ULong_front(self)
    def back(self): return _stann.Vector_DPoint_3d_ULong_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_3d_ULong_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_3d_ULong_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_3d_ULong_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_3d_ULong_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_3d_ULong_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_3d_ULong
    __del__ = lambda self : None;
Vector_DPoint_3d_ULong_swigregister = _stann.Vector_DPoint_3d_ULong_swigregister
Vector_DPoint_3d_ULong_swigregister(Vector_DPoint_3d_ULong)

class Vector_DPoint_3d_Long(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_3d_Long, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_3d_Long, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_3d_Long_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_3d_Long___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_3d_Long___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_3d_Long___len__(self)
    def pop(self): return _stann.Vector_DPoint_3d_Long_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_3d_Long___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_3d_Long___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_3d_Long___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_3d_Long___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_3d_Long___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_3d_Long___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_3d_Long_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_3d_Long_empty(self)
    def size(self): return _stann.Vector_DPoint_3d_Long_size(self)
    def clear(self): return _stann.Vector_DPoint_3d_Long_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_3d_Long_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_3d_Long_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_3d_Long_begin(self)
    def end(self): return _stann.Vector_DPoint_3d_Long_end(self)
    def rbegin(self): return _stann.Vector_DPoint_3d_Long_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_3d_Long_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_3d_Long_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_3d_Long_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_3d_Long(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_3d_Long_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_3d_Long_front(self)
    def back(self): return _stann.Vector_DPoint_3d_Long_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_3d_Long_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_3d_Long_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_3d_Long_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_3d_Long_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_3d_Long_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_3d_Long
    __del__ = lambda self : None;
Vector_DPoint_3d_Long_swigregister = _stann.Vector_DPoint_3d_Long_swigregister
Vector_DPoint_3d_Long_swigregister(Vector_DPoint_3d_Long)

class Vector_DPoint_3d_Float(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_3d_Float, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_3d_Float, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_3d_Float_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_3d_Float___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_3d_Float___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_3d_Float___len__(self)
    def pop(self): return _stann.Vector_DPoint_3d_Float_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_3d_Float___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_3d_Float___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_3d_Float___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_3d_Float___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_3d_Float___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_3d_Float___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_3d_Float_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_3d_Float_empty(self)
    def size(self): return _stann.Vector_DPoint_3d_Float_size(self)
    def clear(self): return _stann.Vector_DPoint_3d_Float_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_3d_Float_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_3d_Float_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_3d_Float_begin(self)
    def end(self): return _stann.Vector_DPoint_3d_Float_end(self)
    def rbegin(self): return _stann.Vector_DPoint_3d_Float_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_3d_Float_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_3d_Float_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_3d_Float_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_3d_Float(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_3d_Float_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_3d_Float_front(self)
    def back(self): return _stann.Vector_DPoint_3d_Float_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_3d_Float_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_3d_Float_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_3d_Float_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_3d_Float_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_3d_Float_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_3d_Float
    __del__ = lambda self : None;
Vector_DPoint_3d_Float_swigregister = _stann.Vector_DPoint_3d_Float_swigregister
Vector_DPoint_3d_Float_swigregister(Vector_DPoint_3d_Float)

class Vector_DPoint_3d_Double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_3d_Double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_3d_Double, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_3d_Double_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_3d_Double___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_3d_Double___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_3d_Double___len__(self)
    def pop(self): return _stann.Vector_DPoint_3d_Double_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_3d_Double___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_3d_Double___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_3d_Double___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_3d_Double___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_3d_Double___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_3d_Double___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_3d_Double_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_3d_Double_empty(self)
    def size(self): return _stann.Vector_DPoint_3d_Double_size(self)
    def clear(self): return _stann.Vector_DPoint_3d_Double_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_3d_Double_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_3d_Double_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_3d_Double_begin(self)
    def end(self): return _stann.Vector_DPoint_3d_Double_end(self)
    def rbegin(self): return _stann.Vector_DPoint_3d_Double_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_3d_Double_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_3d_Double_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_3d_Double_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_3d_Double(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_3d_Double_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_3d_Double_front(self)
    def back(self): return _stann.Vector_DPoint_3d_Double_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_3d_Double_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_3d_Double_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_3d_Double_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_3d_Double_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_3d_Double_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_3d_Double
    __del__ = lambda self : None;
Vector_DPoint_3d_Double_swigregister = _stann.Vector_DPoint_3d_Double_swigregister
Vector_DPoint_3d_Double_swigregister(Vector_DPoint_3d_Double)

class Vector_DPoint_4d_UShort(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_4d_UShort, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_4d_UShort, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_4d_UShort_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_4d_UShort___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_4d_UShort___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_4d_UShort___len__(self)
    def pop(self): return _stann.Vector_DPoint_4d_UShort_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_4d_UShort___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_4d_UShort___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_4d_UShort___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_4d_UShort___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_4d_UShort___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_4d_UShort___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_4d_UShort_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_4d_UShort_empty(self)
    def size(self): return _stann.Vector_DPoint_4d_UShort_size(self)
    def clear(self): return _stann.Vector_DPoint_4d_UShort_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_4d_UShort_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_4d_UShort_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_4d_UShort_begin(self)
    def end(self): return _stann.Vector_DPoint_4d_UShort_end(self)
    def rbegin(self): return _stann.Vector_DPoint_4d_UShort_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_4d_UShort_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_4d_UShort_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_4d_UShort_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_4d_UShort(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_4d_UShort_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_4d_UShort_front(self)
    def back(self): return _stann.Vector_DPoint_4d_UShort_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_4d_UShort_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_4d_UShort_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_4d_UShort_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_4d_UShort_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_4d_UShort_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_4d_UShort
    __del__ = lambda self : None;
Vector_DPoint_4d_UShort_swigregister = _stann.Vector_DPoint_4d_UShort_swigregister
Vector_DPoint_4d_UShort_swigregister(Vector_DPoint_4d_UShort)

class Vector_DPoint_4d_Short(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_4d_Short, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_4d_Short, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_4d_Short_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_4d_Short___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_4d_Short___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_4d_Short___len__(self)
    def pop(self): return _stann.Vector_DPoint_4d_Short_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_4d_Short___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_4d_Short___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_4d_Short___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_4d_Short___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_4d_Short___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_4d_Short___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_4d_Short_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_4d_Short_empty(self)
    def size(self): return _stann.Vector_DPoint_4d_Short_size(self)
    def clear(self): return _stann.Vector_DPoint_4d_Short_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_4d_Short_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_4d_Short_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_4d_Short_begin(self)
    def end(self): return _stann.Vector_DPoint_4d_Short_end(self)
    def rbegin(self): return _stann.Vector_DPoint_4d_Short_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_4d_Short_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_4d_Short_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_4d_Short_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_4d_Short(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_4d_Short_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_4d_Short_front(self)
    def back(self): return _stann.Vector_DPoint_4d_Short_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_4d_Short_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_4d_Short_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_4d_Short_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_4d_Short_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_4d_Short_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_4d_Short
    __del__ = lambda self : None;
Vector_DPoint_4d_Short_swigregister = _stann.Vector_DPoint_4d_Short_swigregister
Vector_DPoint_4d_Short_swigregister(Vector_DPoint_4d_Short)

class Vector_DPoint_4d_UInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_4d_UInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_4d_UInt, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_4d_UInt_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_4d_UInt___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_4d_UInt___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_4d_UInt___len__(self)
    def pop(self): return _stann.Vector_DPoint_4d_UInt_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_4d_UInt___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_4d_UInt___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_4d_UInt___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_4d_UInt___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_4d_UInt___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_4d_UInt___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_4d_UInt_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_4d_UInt_empty(self)
    def size(self): return _stann.Vector_DPoint_4d_UInt_size(self)
    def clear(self): return _stann.Vector_DPoint_4d_UInt_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_4d_UInt_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_4d_UInt_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_4d_UInt_begin(self)
    def end(self): return _stann.Vector_DPoint_4d_UInt_end(self)
    def rbegin(self): return _stann.Vector_DPoint_4d_UInt_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_4d_UInt_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_4d_UInt_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_4d_UInt_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_4d_UInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_4d_UInt_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_4d_UInt_front(self)
    def back(self): return _stann.Vector_DPoint_4d_UInt_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_4d_UInt_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_4d_UInt_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_4d_UInt_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_4d_UInt_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_4d_UInt_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_4d_UInt
    __del__ = lambda self : None;
Vector_DPoint_4d_UInt_swigregister = _stann.Vector_DPoint_4d_UInt_swigregister
Vector_DPoint_4d_UInt_swigregister(Vector_DPoint_4d_UInt)

class Vector_DPoint_4d_Int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_4d_Int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_4d_Int, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_4d_Int_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_4d_Int___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_4d_Int___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_4d_Int___len__(self)
    def pop(self): return _stann.Vector_DPoint_4d_Int_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_4d_Int___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_4d_Int___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_4d_Int___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_4d_Int___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_4d_Int___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_4d_Int___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_4d_Int_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_4d_Int_empty(self)
    def size(self): return _stann.Vector_DPoint_4d_Int_size(self)
    def clear(self): return _stann.Vector_DPoint_4d_Int_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_4d_Int_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_4d_Int_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_4d_Int_begin(self)
    def end(self): return _stann.Vector_DPoint_4d_Int_end(self)
    def rbegin(self): return _stann.Vector_DPoint_4d_Int_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_4d_Int_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_4d_Int_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_4d_Int_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_4d_Int(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_4d_Int_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_4d_Int_front(self)
    def back(self): return _stann.Vector_DPoint_4d_Int_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_4d_Int_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_4d_Int_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_4d_Int_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_4d_Int_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_4d_Int_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_4d_Int
    __del__ = lambda self : None;
Vector_DPoint_4d_Int_swigregister = _stann.Vector_DPoint_4d_Int_swigregister
Vector_DPoint_4d_Int_swigregister(Vector_DPoint_4d_Int)

class Vector_DPoint_4d_ULong(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_4d_ULong, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_4d_ULong, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_4d_ULong_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_4d_ULong___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_4d_ULong___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_4d_ULong___len__(self)
    def pop(self): return _stann.Vector_DPoint_4d_ULong_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_4d_ULong___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_4d_ULong___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_4d_ULong___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_4d_ULong___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_4d_ULong___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_4d_ULong___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_4d_ULong_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_4d_ULong_empty(self)
    def size(self): return _stann.Vector_DPoint_4d_ULong_size(self)
    def clear(self): return _stann.Vector_DPoint_4d_ULong_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_4d_ULong_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_4d_ULong_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_4d_ULong_begin(self)
    def end(self): return _stann.Vector_DPoint_4d_ULong_end(self)
    def rbegin(self): return _stann.Vector_DPoint_4d_ULong_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_4d_ULong_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_4d_ULong_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_4d_ULong_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_4d_ULong(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_4d_ULong_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_4d_ULong_front(self)
    def back(self): return _stann.Vector_DPoint_4d_ULong_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_4d_ULong_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_4d_ULong_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_4d_ULong_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_4d_ULong_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_4d_ULong_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_4d_ULong
    __del__ = lambda self : None;
Vector_DPoint_4d_ULong_swigregister = _stann.Vector_DPoint_4d_ULong_swigregister
Vector_DPoint_4d_ULong_swigregister(Vector_DPoint_4d_ULong)

class Vector_DPoint_4d_Long(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_4d_Long, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_4d_Long, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_4d_Long_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_4d_Long___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_4d_Long___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_4d_Long___len__(self)
    def pop(self): return _stann.Vector_DPoint_4d_Long_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_4d_Long___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_4d_Long___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_4d_Long___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_4d_Long___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_4d_Long___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_4d_Long___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_4d_Long_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_4d_Long_empty(self)
    def size(self): return _stann.Vector_DPoint_4d_Long_size(self)
    def clear(self): return _stann.Vector_DPoint_4d_Long_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_4d_Long_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_4d_Long_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_4d_Long_begin(self)
    def end(self): return _stann.Vector_DPoint_4d_Long_end(self)
    def rbegin(self): return _stann.Vector_DPoint_4d_Long_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_4d_Long_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_4d_Long_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_4d_Long_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_4d_Long(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_4d_Long_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_4d_Long_front(self)
    def back(self): return _stann.Vector_DPoint_4d_Long_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_4d_Long_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_4d_Long_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_4d_Long_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_4d_Long_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_4d_Long_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_4d_Long
    __del__ = lambda self : None;
Vector_DPoint_4d_Long_swigregister = _stann.Vector_DPoint_4d_Long_swigregister
Vector_DPoint_4d_Long_swigregister(Vector_DPoint_4d_Long)

class Vector_DPoint_4d_Float(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_4d_Float, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_4d_Float, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_4d_Float_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_4d_Float___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_4d_Float___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_4d_Float___len__(self)
    def pop(self): return _stann.Vector_DPoint_4d_Float_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_4d_Float___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_4d_Float___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_4d_Float___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_4d_Float___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_4d_Float___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_4d_Float___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_4d_Float_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_4d_Float_empty(self)
    def size(self): return _stann.Vector_DPoint_4d_Float_size(self)
    def clear(self): return _stann.Vector_DPoint_4d_Float_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_4d_Float_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_4d_Float_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_4d_Float_begin(self)
    def end(self): return _stann.Vector_DPoint_4d_Float_end(self)
    def rbegin(self): return _stann.Vector_DPoint_4d_Float_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_4d_Float_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_4d_Float_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_4d_Float_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_4d_Float(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_4d_Float_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_4d_Float_front(self)
    def back(self): return _stann.Vector_DPoint_4d_Float_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_4d_Float_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_4d_Float_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_4d_Float_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_4d_Float_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_4d_Float_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_4d_Float
    __del__ = lambda self : None;
Vector_DPoint_4d_Float_swigregister = _stann.Vector_DPoint_4d_Float_swigregister
Vector_DPoint_4d_Float_swigregister(Vector_DPoint_4d_Float)

class Vector_DPoint_4d_Double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_4d_Double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_4d_Double, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_4d_Double_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_4d_Double___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_4d_Double___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_4d_Double___len__(self)
    def pop(self): return _stann.Vector_DPoint_4d_Double_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_4d_Double___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_4d_Double___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_4d_Double___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_4d_Double___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_4d_Double___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_4d_Double___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_4d_Double_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_4d_Double_empty(self)
    def size(self): return _stann.Vector_DPoint_4d_Double_size(self)
    def clear(self): return _stann.Vector_DPoint_4d_Double_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_4d_Double_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_4d_Double_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_4d_Double_begin(self)
    def end(self): return _stann.Vector_DPoint_4d_Double_end(self)
    def rbegin(self): return _stann.Vector_DPoint_4d_Double_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_4d_Double_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_4d_Double_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_4d_Double_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_4d_Double(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_4d_Double_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_4d_Double_front(self)
    def back(self): return _stann.Vector_DPoint_4d_Double_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_4d_Double_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_4d_Double_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_4d_Double_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_4d_Double_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_4d_Double_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_4d_Double
    __del__ = lambda self : None;
Vector_DPoint_4d_Double_swigregister = _stann.Vector_DPoint_4d_Double_swigregister
Vector_DPoint_4d_Double_swigregister(Vector_DPoint_4d_Double)

class Vector_DPoint_5d_UShort(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_5d_UShort, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_5d_UShort, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_5d_UShort_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_5d_UShort___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_5d_UShort___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_5d_UShort___len__(self)
    def pop(self): return _stann.Vector_DPoint_5d_UShort_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_5d_UShort___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_5d_UShort___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_5d_UShort___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_5d_UShort___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_5d_UShort___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_5d_UShort___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_5d_UShort_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_5d_UShort_empty(self)
    def size(self): return _stann.Vector_DPoint_5d_UShort_size(self)
    def clear(self): return _stann.Vector_DPoint_5d_UShort_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_5d_UShort_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_5d_UShort_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_5d_UShort_begin(self)
    def end(self): return _stann.Vector_DPoint_5d_UShort_end(self)
    def rbegin(self): return _stann.Vector_DPoint_5d_UShort_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_5d_UShort_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_5d_UShort_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_5d_UShort_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_5d_UShort(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_5d_UShort_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_5d_UShort_front(self)
    def back(self): return _stann.Vector_DPoint_5d_UShort_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_5d_UShort_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_5d_UShort_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_5d_UShort_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_5d_UShort_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_5d_UShort_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_5d_UShort
    __del__ = lambda self : None;
Vector_DPoint_5d_UShort_swigregister = _stann.Vector_DPoint_5d_UShort_swigregister
Vector_DPoint_5d_UShort_swigregister(Vector_DPoint_5d_UShort)

class Vector_DPoint_5d_Short(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_5d_Short, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_5d_Short, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_5d_Short_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_5d_Short___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_5d_Short___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_5d_Short___len__(self)
    def pop(self): return _stann.Vector_DPoint_5d_Short_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_5d_Short___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_5d_Short___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_5d_Short___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_5d_Short___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_5d_Short___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_5d_Short___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_5d_Short_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_5d_Short_empty(self)
    def size(self): return _stann.Vector_DPoint_5d_Short_size(self)
    def clear(self): return _stann.Vector_DPoint_5d_Short_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_5d_Short_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_5d_Short_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_5d_Short_begin(self)
    def end(self): return _stann.Vector_DPoint_5d_Short_end(self)
    def rbegin(self): return _stann.Vector_DPoint_5d_Short_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_5d_Short_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_5d_Short_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_5d_Short_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_5d_Short(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_5d_Short_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_5d_Short_front(self)
    def back(self): return _stann.Vector_DPoint_5d_Short_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_5d_Short_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_5d_Short_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_5d_Short_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_5d_Short_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_5d_Short_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_5d_Short
    __del__ = lambda self : None;
Vector_DPoint_5d_Short_swigregister = _stann.Vector_DPoint_5d_Short_swigregister
Vector_DPoint_5d_Short_swigregister(Vector_DPoint_5d_Short)

class Vector_DPoint_5d_UInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_5d_UInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_5d_UInt, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_5d_UInt_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_5d_UInt___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_5d_UInt___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_5d_UInt___len__(self)
    def pop(self): return _stann.Vector_DPoint_5d_UInt_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_5d_UInt___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_5d_UInt___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_5d_UInt___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_5d_UInt___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_5d_UInt___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_5d_UInt___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_5d_UInt_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_5d_UInt_empty(self)
    def size(self): return _stann.Vector_DPoint_5d_UInt_size(self)
    def clear(self): return _stann.Vector_DPoint_5d_UInt_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_5d_UInt_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_5d_UInt_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_5d_UInt_begin(self)
    def end(self): return _stann.Vector_DPoint_5d_UInt_end(self)
    def rbegin(self): return _stann.Vector_DPoint_5d_UInt_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_5d_UInt_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_5d_UInt_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_5d_UInt_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_5d_UInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_5d_UInt_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_5d_UInt_front(self)
    def back(self): return _stann.Vector_DPoint_5d_UInt_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_5d_UInt_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_5d_UInt_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_5d_UInt_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_5d_UInt_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_5d_UInt_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_5d_UInt
    __del__ = lambda self : None;
Vector_DPoint_5d_UInt_swigregister = _stann.Vector_DPoint_5d_UInt_swigregister
Vector_DPoint_5d_UInt_swigregister(Vector_DPoint_5d_UInt)

class Vector_DPoint_5d_Int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_5d_Int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_5d_Int, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_5d_Int_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_5d_Int___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_5d_Int___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_5d_Int___len__(self)
    def pop(self): return _stann.Vector_DPoint_5d_Int_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_5d_Int___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_5d_Int___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_5d_Int___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_5d_Int___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_5d_Int___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_5d_Int___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_5d_Int_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_5d_Int_empty(self)
    def size(self): return _stann.Vector_DPoint_5d_Int_size(self)
    def clear(self): return _stann.Vector_DPoint_5d_Int_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_5d_Int_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_5d_Int_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_5d_Int_begin(self)
    def end(self): return _stann.Vector_DPoint_5d_Int_end(self)
    def rbegin(self): return _stann.Vector_DPoint_5d_Int_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_5d_Int_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_5d_Int_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_5d_Int_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_5d_Int(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_5d_Int_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_5d_Int_front(self)
    def back(self): return _stann.Vector_DPoint_5d_Int_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_5d_Int_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_5d_Int_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_5d_Int_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_5d_Int_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_5d_Int_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_5d_Int
    __del__ = lambda self : None;
Vector_DPoint_5d_Int_swigregister = _stann.Vector_DPoint_5d_Int_swigregister
Vector_DPoint_5d_Int_swigregister(Vector_DPoint_5d_Int)

class Vector_DPoint_5d_ULong(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_5d_ULong, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_5d_ULong, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_5d_ULong_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_5d_ULong___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_5d_ULong___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_5d_ULong___len__(self)
    def pop(self): return _stann.Vector_DPoint_5d_ULong_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_5d_ULong___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_5d_ULong___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_5d_ULong___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_5d_ULong___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_5d_ULong___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_5d_ULong___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_5d_ULong_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_5d_ULong_empty(self)
    def size(self): return _stann.Vector_DPoint_5d_ULong_size(self)
    def clear(self): return _stann.Vector_DPoint_5d_ULong_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_5d_ULong_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_5d_ULong_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_5d_ULong_begin(self)
    def end(self): return _stann.Vector_DPoint_5d_ULong_end(self)
    def rbegin(self): return _stann.Vector_DPoint_5d_ULong_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_5d_ULong_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_5d_ULong_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_5d_ULong_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_5d_ULong(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_5d_ULong_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_5d_ULong_front(self)
    def back(self): return _stann.Vector_DPoint_5d_ULong_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_5d_ULong_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_5d_ULong_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_5d_ULong_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_5d_ULong_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_5d_ULong_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_5d_ULong
    __del__ = lambda self : None;
Vector_DPoint_5d_ULong_swigregister = _stann.Vector_DPoint_5d_ULong_swigregister
Vector_DPoint_5d_ULong_swigregister(Vector_DPoint_5d_ULong)

class Vector_DPoint_5d_Long(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_5d_Long, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_5d_Long, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_5d_Long_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_5d_Long___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_5d_Long___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_5d_Long___len__(self)
    def pop(self): return _stann.Vector_DPoint_5d_Long_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_5d_Long___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_5d_Long___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_5d_Long___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_5d_Long___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_5d_Long___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_5d_Long___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_5d_Long_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_5d_Long_empty(self)
    def size(self): return _stann.Vector_DPoint_5d_Long_size(self)
    def clear(self): return _stann.Vector_DPoint_5d_Long_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_5d_Long_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_5d_Long_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_5d_Long_begin(self)
    def end(self): return _stann.Vector_DPoint_5d_Long_end(self)
    def rbegin(self): return _stann.Vector_DPoint_5d_Long_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_5d_Long_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_5d_Long_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_5d_Long_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_5d_Long(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_5d_Long_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_5d_Long_front(self)
    def back(self): return _stann.Vector_DPoint_5d_Long_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_5d_Long_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_5d_Long_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_5d_Long_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_5d_Long_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_5d_Long_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_5d_Long
    __del__ = lambda self : None;
Vector_DPoint_5d_Long_swigregister = _stann.Vector_DPoint_5d_Long_swigregister
Vector_DPoint_5d_Long_swigregister(Vector_DPoint_5d_Long)

class Vector_DPoint_5d_Float(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_5d_Float, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_5d_Float, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_5d_Float_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_5d_Float___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_5d_Float___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_5d_Float___len__(self)
    def pop(self): return _stann.Vector_DPoint_5d_Float_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_5d_Float___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_5d_Float___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_5d_Float___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_5d_Float___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_5d_Float___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_5d_Float___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_5d_Float_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_5d_Float_empty(self)
    def size(self): return _stann.Vector_DPoint_5d_Float_size(self)
    def clear(self): return _stann.Vector_DPoint_5d_Float_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_5d_Float_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_5d_Float_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_5d_Float_begin(self)
    def end(self): return _stann.Vector_DPoint_5d_Float_end(self)
    def rbegin(self): return _stann.Vector_DPoint_5d_Float_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_5d_Float_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_5d_Float_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_5d_Float_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_5d_Float(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_5d_Float_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_5d_Float_front(self)
    def back(self): return _stann.Vector_DPoint_5d_Float_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_5d_Float_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_5d_Float_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_5d_Float_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_5d_Float_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_5d_Float_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_5d_Float
    __del__ = lambda self : None;
Vector_DPoint_5d_Float_swigregister = _stann.Vector_DPoint_5d_Float_swigregister
Vector_DPoint_5d_Float_swigregister(Vector_DPoint_5d_Float)

class Vector_DPoint_5d_Double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DPoint_5d_Double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DPoint_5d_Double, name)
    __repr__ = _swig_repr
    def iterator(self): return _stann.Vector_DPoint_5d_Double_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _stann.Vector_DPoint_5d_Double___nonzero__(self)
    def __bool__(self): return _stann.Vector_DPoint_5d_Double___bool__(self)
    def __len__(self): return _stann.Vector_DPoint_5d_Double___len__(self)
    def pop(self): return _stann.Vector_DPoint_5d_Double_pop(self)
    def __getslice__(self, *args): return _stann.Vector_DPoint_5d_Double___getslice__(self, *args)
    def __setslice__(self, *args): return _stann.Vector_DPoint_5d_Double___setslice__(self, *args)
    def __delslice__(self, *args): return _stann.Vector_DPoint_5d_Double___delslice__(self, *args)
    def __delitem__(self, *args): return _stann.Vector_DPoint_5d_Double___delitem__(self, *args)
    def __getitem__(self, *args): return _stann.Vector_DPoint_5d_Double___getitem__(self, *args)
    def __setitem__(self, *args): return _stann.Vector_DPoint_5d_Double___setitem__(self, *args)
    def append(self, *args): return _stann.Vector_DPoint_5d_Double_append(self, *args)
    def empty(self): return _stann.Vector_DPoint_5d_Double_empty(self)
    def size(self): return _stann.Vector_DPoint_5d_Double_size(self)
    def clear(self): return _stann.Vector_DPoint_5d_Double_clear(self)
    def swap(self, *args): return _stann.Vector_DPoint_5d_Double_swap(self, *args)
    def get_allocator(self): return _stann.Vector_DPoint_5d_Double_get_allocator(self)
    def begin(self): return _stann.Vector_DPoint_5d_Double_begin(self)
    def end(self): return _stann.Vector_DPoint_5d_Double_end(self)
    def rbegin(self): return _stann.Vector_DPoint_5d_Double_rbegin(self)
    def rend(self): return _stann.Vector_DPoint_5d_Double_rend(self)
    def pop_back(self): return _stann.Vector_DPoint_5d_Double_pop_back(self)
    def erase(self, *args): return _stann.Vector_DPoint_5d_Double_erase(self, *args)
    def __init__(self, *args): 
        this = _stann.new_Vector_DPoint_5d_Double(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _stann.Vector_DPoint_5d_Double_push_back(self, *args)
    def front(self): return _stann.Vector_DPoint_5d_Double_front(self)
    def back(self): return _stann.Vector_DPoint_5d_Double_back(self)
    def assign(self, *args): return _stann.Vector_DPoint_5d_Double_assign(self, *args)
    def resize(self, *args): return _stann.Vector_DPoint_5d_Double_resize(self, *args)
    def insert(self, *args): return _stann.Vector_DPoint_5d_Double_insert(self, *args)
    def reserve(self, *args): return _stann.Vector_DPoint_5d_Double_reserve(self, *args)
    def capacity(self): return _stann.Vector_DPoint_5d_Double_capacity(self)
    __swig_destroy__ = _stann.delete_Vector_DPoint_5d_Double
    __del__ = lambda self : None;
Vector_DPoint_5d_Double_swigregister = _stann.Vector_DPoint_5d_Double_swigregister
Vector_DPoint_5d_Double_swigregister(Vector_DPoint_5d_Double)


def newRandomPoint_DPoint_1d_UShort(*args):
  return _stann.newRandomPoint_DPoint_1d_UShort(*args)
newRandomPoint_DPoint_1d_UShort = _stann.newRandomPoint_DPoint_1d_UShort

def newRandomPoint_DPoint_1d_Short(*args):
  return _stann.newRandomPoint_DPoint_1d_Short(*args)
newRandomPoint_DPoint_1d_Short = _stann.newRandomPoint_DPoint_1d_Short

def newRandomPoint_DPoint_1d_UInt(*args):
  return _stann.newRandomPoint_DPoint_1d_UInt(*args)
newRandomPoint_DPoint_1d_UInt = _stann.newRandomPoint_DPoint_1d_UInt

def newRandomPoint_DPoint_1d_Int(*args):
  return _stann.newRandomPoint_DPoint_1d_Int(*args)
newRandomPoint_DPoint_1d_Int = _stann.newRandomPoint_DPoint_1d_Int

def newRandomPoint_DPoint_1d_ULong(*args):
  return _stann.newRandomPoint_DPoint_1d_ULong(*args)
newRandomPoint_DPoint_1d_ULong = _stann.newRandomPoint_DPoint_1d_ULong

def newRandomPoint_DPoint_1d_Long(*args):
  return _stann.newRandomPoint_DPoint_1d_Long(*args)
newRandomPoint_DPoint_1d_Long = _stann.newRandomPoint_DPoint_1d_Long

def newRandomPoint_DPoint_1d_Float(*args):
  return _stann.newRandomPoint_DPoint_1d_Float(*args)
newRandomPoint_DPoint_1d_Float = _stann.newRandomPoint_DPoint_1d_Float

def newRandomPoint_DPoint_1d_Double(*args):
  return _stann.newRandomPoint_DPoint_1d_Double(*args)
newRandomPoint_DPoint_1d_Double = _stann.newRandomPoint_DPoint_1d_Double

def newRandomPoint_DPoint_2d_UShort(*args):
  return _stann.newRandomPoint_DPoint_2d_UShort(*args)
newRandomPoint_DPoint_2d_UShort = _stann.newRandomPoint_DPoint_2d_UShort

def newRandomPoint_DPoint_2d_Short(*args):
  return _stann.newRandomPoint_DPoint_2d_Short(*args)
newRandomPoint_DPoint_2d_Short = _stann.newRandomPoint_DPoint_2d_Short

def newRandomPoint_DPoint_2d_UInt(*args):
  return _stann.newRandomPoint_DPoint_2d_UInt(*args)
newRandomPoint_DPoint_2d_UInt = _stann.newRandomPoint_DPoint_2d_UInt

def newRandomPoint_DPoint_2d_Int(*args):
  return _stann.newRandomPoint_DPoint_2d_Int(*args)
newRandomPoint_DPoint_2d_Int = _stann.newRandomPoint_DPoint_2d_Int

def newRandomPoint_DPoint_2d_ULong(*args):
  return _stann.newRandomPoint_DPoint_2d_ULong(*args)
newRandomPoint_DPoint_2d_ULong = _stann.newRandomPoint_DPoint_2d_ULong

def newRandomPoint_DPoint_2d_Long(*args):
  return _stann.newRandomPoint_DPoint_2d_Long(*args)
newRandomPoint_DPoint_2d_Long = _stann.newRandomPoint_DPoint_2d_Long

def newRandomPoint_DPoint_2d_Float(*args):
  return _stann.newRandomPoint_DPoint_2d_Float(*args)
newRandomPoint_DPoint_2d_Float = _stann.newRandomPoint_DPoint_2d_Float

def newRandomPoint_DPoint_2d_Double(*args):
  return _stann.newRandomPoint_DPoint_2d_Double(*args)
newRandomPoint_DPoint_2d_Double = _stann.newRandomPoint_DPoint_2d_Double

def newRandomPoint_DPoint_3d_UShort(*args):
  return _stann.newRandomPoint_DPoint_3d_UShort(*args)
newRandomPoint_DPoint_3d_UShort = _stann.newRandomPoint_DPoint_3d_UShort

def newRandomPoint_DPoint_3d_Short(*args):
  return _stann.newRandomPoint_DPoint_3d_Short(*args)
newRandomPoint_DPoint_3d_Short = _stann.newRandomPoint_DPoint_3d_Short

def newRandomPoint_DPoint_3d_UInt(*args):
  return _stann.newRandomPoint_DPoint_3d_UInt(*args)
newRandomPoint_DPoint_3d_UInt = _stann.newRandomPoint_DPoint_3d_UInt

def newRandomPoint_DPoint_3d_Int(*args):
  return _stann.newRandomPoint_DPoint_3d_Int(*args)
newRandomPoint_DPoint_3d_Int = _stann.newRandomPoint_DPoint_3d_Int

def newRandomPoint_DPoint_3d_ULong(*args):
  return _stann.newRandomPoint_DPoint_3d_ULong(*args)
newRandomPoint_DPoint_3d_ULong = _stann.newRandomPoint_DPoint_3d_ULong

def newRandomPoint_DPoint_3d_Long(*args):
  return _stann.newRandomPoint_DPoint_3d_Long(*args)
newRandomPoint_DPoint_3d_Long = _stann.newRandomPoint_DPoint_3d_Long

def newRandomPoint_DPoint_3d_Float(*args):
  return _stann.newRandomPoint_DPoint_3d_Float(*args)
newRandomPoint_DPoint_3d_Float = _stann.newRandomPoint_DPoint_3d_Float

def newRandomPoint_DPoint_3d_Double(*args):
  return _stann.newRandomPoint_DPoint_3d_Double(*args)
newRandomPoint_DPoint_3d_Double = _stann.newRandomPoint_DPoint_3d_Double

def newRandomPoint_DPoint_4d_UShort(*args):
  return _stann.newRandomPoint_DPoint_4d_UShort(*args)
newRandomPoint_DPoint_4d_UShort = _stann.newRandomPoint_DPoint_4d_UShort

def newRandomPoint_DPoint_4d_Short(*args):
  return _stann.newRandomPoint_DPoint_4d_Short(*args)
newRandomPoint_DPoint_4d_Short = _stann.newRandomPoint_DPoint_4d_Short

def newRandomPoint_DPoint_4d_UInt(*args):
  return _stann.newRandomPoint_DPoint_4d_UInt(*args)
newRandomPoint_DPoint_4d_UInt = _stann.newRandomPoint_DPoint_4d_UInt

def newRandomPoint_DPoint_4d_Int(*args):
  return _stann.newRandomPoint_DPoint_4d_Int(*args)
newRandomPoint_DPoint_4d_Int = _stann.newRandomPoint_DPoint_4d_Int

def newRandomPoint_DPoint_4d_ULong(*args):
  return _stann.newRandomPoint_DPoint_4d_ULong(*args)
newRandomPoint_DPoint_4d_ULong = _stann.newRandomPoint_DPoint_4d_ULong

def newRandomPoint_DPoint_4d_Long(*args):
  return _stann.newRandomPoint_DPoint_4d_Long(*args)
newRandomPoint_DPoint_4d_Long = _stann.newRandomPoint_DPoint_4d_Long

def newRandomPoint_DPoint_4d_Float(*args):
  return _stann.newRandomPoint_DPoint_4d_Float(*args)
newRandomPoint_DPoint_4d_Float = _stann.newRandomPoint_DPoint_4d_Float

def newRandomPoint_DPoint_4d_Double(*args):
  return _stann.newRandomPoint_DPoint_4d_Double(*args)
newRandomPoint_DPoint_4d_Double = _stann.newRandomPoint_DPoint_4d_Double

def newRandomPoint_DPoint_5d_UShort(*args):
  return _stann.newRandomPoint_DPoint_5d_UShort(*args)
newRandomPoint_DPoint_5d_UShort = _stann.newRandomPoint_DPoint_5d_UShort

def newRandomPoint_DPoint_5d_Short(*args):
  return _stann.newRandomPoint_DPoint_5d_Short(*args)
newRandomPoint_DPoint_5d_Short = _stann.newRandomPoint_DPoint_5d_Short

def newRandomPoint_DPoint_5d_UInt(*args):
  return _stann.newRandomPoint_DPoint_5d_UInt(*args)
newRandomPoint_DPoint_5d_UInt = _stann.newRandomPoint_DPoint_5d_UInt

def newRandomPoint_DPoint_5d_Int(*args):
  return _stann.newRandomPoint_DPoint_5d_Int(*args)
newRandomPoint_DPoint_5d_Int = _stann.newRandomPoint_DPoint_5d_Int

def newRandomPoint_DPoint_5d_ULong(*args):
  return _stann.newRandomPoint_DPoint_5d_ULong(*args)
newRandomPoint_DPoint_5d_ULong = _stann.newRandomPoint_DPoint_5d_ULong

def newRandomPoint_DPoint_5d_Long(*args):
  return _stann.newRandomPoint_DPoint_5d_Long(*args)
newRandomPoint_DPoint_5d_Long = _stann.newRandomPoint_DPoint_5d_Long

def newRandomPoint_DPoint_5d_Float(*args):
  return _stann.newRandomPoint_DPoint_5d_Float(*args)
newRandomPoint_DPoint_5d_Float = _stann.newRandomPoint_DPoint_5d_Float

def newRandomPoint_DPoint_5d_Double(*args):
  return _stann.newRandomPoint_DPoint_5d_Double(*args)
newRandomPoint_DPoint_5d_Double = _stann.newRandomPoint_DPoint_5d_Double
class bruteNN_DPoint_3d_Int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bruteNN_DPoint_3d_Int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bruteNN_DPoint_3d_Int, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stann.new_bruteNN_DPoint_3d_Int(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_bruteNN_DPoint_3d_Int
    __del__ = lambda self : None;
    def ksearch(self, *args): return _stann.bruteNN_DPoint_3d_Int_ksearch(self, *args)
bruteNN_DPoint_3d_Int_swigregister = _stann.bruteNN_DPoint_3d_Int_swigregister
bruteNN_DPoint_3d_Int_swigregister(bruteNN_DPoint_3d_Int)

class sfcnn_DPoint_3d_Int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sfcnn_DPoint_3d_Int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sfcnn_DPoint_3d_Int, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stann.new_sfcnn_DPoint_3d_Int(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stann.delete_sfcnn_DPoint_3d_Int
    __del__ = lambda self : None;
    def ksearch(self, *args): return _stann.sfcnn_DPoint_3d_Int_ksearch(self, *args)
sfcnn_DPoint_3d_Int_swigregister = _stann.sfcnn_DPoint_3d_Int_swigregister
sfcnn_DPoint_3d_Int_swigregister(sfcnn_DPoint_3d_Int)

# This file is compatible with both classic and new-style classes.


